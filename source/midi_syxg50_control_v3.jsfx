// Yamaha S-YXG50 VSTi external control panel by Shiru
// https://www.patreon.com/shiru8bit shiru@mail.ru
// released under the CC0 terms

// v2.6 04.06.24 - Use full names for all voices;
//                 Increase the GUI size once again;
//                 Tweak colors for better contrast a bit;
//                 Adjust naming of some parameters and parameter values;
//                 Filter modulation amount shows values in cents;
//                 Remove "FX:" from tab names;
//                 Draw bipolar parameters with bipolar sliders;
//                 Add more param value tables (mid width, high damp, send/return dB, percent...);
//                 Add support for channel/poly aftertouch modulation params;
//                 Add Tuning page to Voice Editor;
//                 Add Pitch EG parameters to Voice Editor->Common;
//                 Use unicode up-down arrows instead of ... on Variation page;
//                 Add support for MIDI filters and Same Key Assign parameters;
//                 Fix two typos in table data file;
//                 Fix cursor going out of bounds on mousewheel
// v2.5 27.05.24 - Enable default FXs as defined in the XG standard (Hall 1, Chorus 1, Delay LCR);
//                 Adjust Reverbs/Delays defaults to match XGworks;
//                 Rename "Channel" to "Part" as defined in the XG standard;
//                 Change part 11-16 with QWERTY keys;
//                 Add "XG" button to force re-send all parameters;
//                 Add "Modulation" and "Keyboard" sections to "Voice Editor" tab;
//                 Move FX sends to "Voice Editor" tab;
//                 Slightly increase window size;
//                 Fix data corruption due to concurrency;
//                 Fix sending duplicated sysex messages;
//                 Fix category offset when opening the first time
// v2.4 12.01.24 - Change midi channel with number keys
// v2.3 11.01.24 - Ctrl+left click to reset sliders to default;
//                 Make the selected menu item visible on page enter;
//                 Force update after data was loaded (useful for presets);
//                 Codebase cleanup
// v2.2 27.11.23 - Change UI colors to neutral tones
// v2.1 15.11.23 - New UI colors and font;
//                 Highlight user-changed parameters;
//                 Improve mouse scroll wheel behaviour on sliders;
//                 Add missing reverb, chorus and variation effects;
//                 Add missing effect data value tables;
//                 Remove "Dry/Wet" parameter since it has no effect when variation connection = system;
//                 Remove "Thru" effect
// v2.0 07.09.23 - Default values for every parameter (obtained from the XG specifications manual);
//                 New editor tab to edit common voice parameters;
//                 Instruments are now saved per channel;
//                 When changing MIDI channel the instrument category switches accordingly;
//                 Serialize parameter values instead of slider positions to avoid float precision loss
// v1.1 13.02.20 - MIDI channel can be changed with RMB and mouse wheel;
//                 Shift+mouse wheel to precise adjustments of the sliders;
//                 Reverb/Chorus/Variation sends are per-channel settings now;
//                 RMB on a parameter to reset to a default value;
//                 Reverb/Chorus/Variation settings properly restored after loading
// v1.0 12.06.17 - Initial release worthy version, with instument list and all effect parameters
// v0.0 31.05.17 - Work started

// Special thanks to phonymacaroni, EvilDragon
// Changes in v2/v3 implemented by samlletas, mkruselj

desc:MIDI S-YXG50 Control Panel v3

in_pin:none
out_pin:none

import midi_syxg50_data.jsfx-inc
import midi_syxg50_mutex.jsfx-inc


@init

ext_noinit = 1;
gfx_clear = -1;

color_bg_darkest = 0x161616;
color_bg_darker  = 0x202020;
color_bg_dark    = 0x292929;
color_bg_light   = 0x363636;
color_bg_cursor  = 0xFFCC66;
color_bg_changed = 0x5CCFE6;
color_bg_voice   = 0x514631;
color_fg_menu    = 0x707070;
color_fg_list    = 0xD4D4D4;
color_fg_bracket = 0x575757;
color_bg_col_alt = 0x252525;
color_bg_row_alt = 0x313131;

font_default = 1;
font_small   = 2;
font_smaller = 3;

gfx_setfont(font_default, "Segoe UI", 22);
gfx_setfont(font_small,   "Segoe UI", 20);
gfx_setfont(font_smaller, "Segoe UI", 19);

gui_menu_height = 44;

gui_overview_header_height = 82;
gui_overview_cell_width = 44;
gui_overview_cell_height = 39;

gui_categories_width = 180;
gui_categories_count = 0;
gui_categories_visible = 0;

gui_list_item_width = 200;
gui_list_item_height = 27;

gui_slider_width = 256;
gui_slider_halfwidth = gui_slider_width * 0.5;
gui_slider_height = 12;
gui_slider_spacing = 26;

gui_switch_width = gui_slider_width;
gui_switch_height = 18;
gui_switch_margin = 8;

gui_control_x = 0;
gui_control_y = 0;
gui_focus_x = -1;
gui_focus_y = -1;
gui_drag_range = 127;
gui_drag_center = 0;
gui_drag_value = 0;
gui_value_change = 0;
gui_value_table = "";

gui_key = 0;
gui_key_ctrl = 0;
gui_mouse_left = 0;
gui_mouse_right = 0;

gui_page = 0;
gui_page_prev = -1;

gui_part = 0;
gui_part_prev = -1;

gui_overview_mode = 0;

gui_categories_voice_cursor = 0;
gui_categories_voice_offset = 0;
gui_categories_voice_cursor_prev = -1;

gui_categories_editor_cursor = 0;
gui_categories_editor_offset = 0;
gui_categories_editor_cursor_prev = -1;

gui_categories_reverb_cursor = 1;
gui_categories_reverb_offset = 0;
gui_categories_reverb_cursor_prev = -1;

gui_categories_chorus_cursor = 1;
gui_categories_chorus_offset = 0;
gui_categories_chorus_cursor_prev = -1;

gui_categories_variation_cursor = 9;
gui_categories_variation_offset = 0;
gui_categories_variation_cursor_prev = -1;

incoming_bank_msb = 000;
incoming_bank_lsb = 100;
incoming_cc_queue = 200;
incoming_cc_queue_ptr = 0;

midi_force_update = 0;
midi_first_time = 1;

sysex_buf = 100000;
sysex_queue = 100100;
sysex_queue_ptr = 0;
sysex_delay = 0;

// effect parameters
effect_reverb_return = -1;
effect_chorus_return = -1;
effect_variation_return = -1;

effect_reverb_pan = -1;
effect_chorus_pan = -1;
effect_variation_pan = -1;

effect_chorus_send_reverb = -1;
effect_variation_send_reverb = -1;
effect_variation_send_chorus = -1;

effect_params = 250000;
idx = 0;

loop (42 * 16 * 3,
  effect_params[idx] = -1;
  idx += 1;
);

// voice parameters
voice_category = 300000;
voice_number = 300100;
part_bank_msb = 300200;
part_bank_lsb = 300300;
part_program = 300400;

// common parameters
part_rcv_channel = 300500;
part_mode = 300600;
part_portamento_switch = 300700;
part_portamento_time = 300800;
part_volume = 300900;
part_pan = 301000;
part_note_shift = 301100;
part_detune = 301200;
part_filter_cutoff = 301300;
part_filter_resonance = 301400;
part_eg_attack = 301500;
part_eg_decay = 301600;
part_eg_release = 301700;
part_pitch_eg_init_level = 301800;
part_pitch_eg_attack = 301900;
part_pitch_eg_release_level = 302000;
part_pitch_eg_release = 302100;
part_reverb_send = 302200;
part_chorus_send = 302300;
part_variation_send = 302400;
part_dry_level = 302500;

// modulation parameters
part_vibrato_rate = 302600;
part_vibrato_depth = 302700;
part_vibrato_delay = 302800;
part_bend_pitch_control = 302900;
part_bend_filter_control = 303000;
part_bend_amplitude_control = 303100;
part_bend_lfo_pmod_depth = 303200;
part_bend_lfo_fmod_depth = 303300;
part_bend_lfo_amod_depth = 303400;
part_mw_pitch_control = 303500;
part_mw_filter_control = 303600;
part_mw_amplitude_control = 303700;
part_mw_lfo_pmod_depth = 303800;
part_mw_lfo_fmod_depth = 303900;
part_mw_lfo_amod_depth = 304000;
part_at_pitch_control = 304100;
part_at_filter_control = 304200;
part_at_amplitude_control = 304300;
part_at_lfo_pmod_depth = 304400;
part_at_lfo_fmod_depth = 304500;
part_at_lfo_amod_depth = 304600;

// keyboard parameters
part_note_limit_low = 304700;
part_note_limit_high = 304800;
part_velocity_limit_low = 304900;
part_velocity_limit_high = 305000;
part_velocity_sense_depth = 305100;
part_velocity_sense_offset = 305200;
part_same_note_assign = 305300;
part_element_reserve = 305400;

// tuning parameters
part_scale_c = 305500;
part_scale_cs = 305600;
part_scale_d = 305700;
part_scale_ds = 305800;
part_scale_e = 305900;
part_scale_f = 306000;
part_scale_fs = 306100;
part_scale_g = 306200;
part_scale_gs = 306300;
part_scale_a = 306400;
part_scale_as = 306500;
part_scale_b = 306600;

// MIDI filter parameters
part_recv_note = 306700;
part_recv_pc = 306800;
part_recv_bs = 306900;
part_recv_cat = 307000;
part_recv_pat = 307100;
part_recv_pb = 307200;
part_recv_cc = 307300;
part_recv_mod = 307400;
part_recv_vol = 307500;
part_recv_pan = 307600;
part_recv_exp = 307700;
part_recv_sus = 307800;
part_recv_sost = 307900;
part_recv_soft = 308000;
part_recv_port = 308100;
part_recv_rpn = 308200;
part_recv_nrpn = 308300;

idx = 0;

loop (16,
  // voice parameters defaults
  voice_category[idx] = idx == 9 ? 16 : 0;
  voice_number[idx] = 0;
  part_bank_msb[idx] = idx == 9 ? 127 : 0;
  part_bank_lsb[idx] = 0;
  part_program[idx] = 0;

  // common parameters defaults
  part_rcv_channel[idx] = idx;
  part_mode[idx] = 1;
  part_portamento_switch[idx] = 0;
  part_portamento_time[idx] = 0;
  part_volume[idx] = 100;
  part_pan[idx] = 64;
  part_note_shift[idx] = 64;
  part_detune[idx] = 128;
  part_filter_cutoff[idx] = 64;
  part_filter_resonance[idx] = 64;
  part_eg_attack[idx] = 64;
  part_eg_decay[idx] = 64;
  part_eg_release[idx] = 64;
  part_pitch_eg_init_level[idx] = 64;
  part_pitch_eg_attack[idx] = 64;
  part_pitch_eg_release_level[idx] = 64;
  part_pitch_eg_release[idx] = 64;
  part_reverb_send[idx] = 40;
  part_chorus_send[idx] = 0;
  part_variation_send[idx] = 0;
  part_dry_level[idx] = 127;

  // modulation parameters defaults
  part_vibrato_rate[idx] = 64;
  part_vibrato_depth[idx] = 64;
  part_vibrato_delay[idx] = 64;
  part_bend_pitch_control[idx] = 66;
  part_bend_filter_control[idx] = 64;
  part_bend_amplitude_control[idx] = 64;
  part_bend_lfo_pmod_depth[idx] = 0;
  part_bend_lfo_fmod_depth[idx] = 0;
  part_bend_lfo_amod_depth[idx] = 0;
  part_mw_pitch_control[idx] = 64;
  part_mw_filter_control[idx] = 64;
  part_mw_amplitude_control[idx] = 64;
  part_mw_lfo_pmod_depth[idx] = 10;
  part_mw_lfo_fmod_depth[idx] = 0;
  part_mw_lfo_amod_depth[idx] = 0;
  part_at_pitch_control[idx] = 64;
  part_at_filter_control[idx] = 64;
  part_at_amplitude_control[idx] = 64;
  part_at_lfo_pmod_depth[idx] = 0;
  part_at_lfo_fmod_depth[idx] = 0;
  part_at_lfo_amod_depth[idx] = 0;

  // keyboard parameters defaults
  part_note_limit_low[idx] = 0;
  part_note_limit_high[idx] = 127;
  part_velocity_limit_low[idx] = 1;
  part_velocity_limit_high[idx] = 127;
  part_velocity_sense_depth[idx] = 64;
  part_velocity_sense_offset[idx] = 64;
  part_same_note_assign[idx] = 1;
  part_element_reserve[idx] = idx == 9 ? 0 : 2;

  // tuning parameters defaults
  part_scale_c[idx] = 64;
  part_scale_cs[idx] = 64;
  part_scale_d[idx] = 64;
  part_scale_ds[idx] = 64;
  part_scale_e[idx] = 64;
  part_scale_f[idx] = 64;
  part_scale_fs[idx] = 64;
  part_scale_g[idx] = 64;
  part_scale_gs[idx] = 64;
  part_scale_a[idx] = 64;
  part_scale_as[idx] = 64;
  part_scale_b[idx] = 64;

  // MIDI filter parameters defaults
  part_recv_note[idx] = 1;
  part_recv_pc[idx] = 1;
  part_recv_bs[idx] = 1;
  part_recv_cat[idx] = 1;
  part_recv_pat[idx] = 1;
  part_recv_pb[idx] = 1;
  part_recv_cc[idx] = 1;
  part_recv_mod[idx] = 1;
  part_recv_vol[idx] = 1;
  part_recv_pan[idx] = 1;
  part_recv_exp[idx] = 1;
  part_recv_sus[idx] = 1;
  part_recv_sost[idx] = 1;
  part_recv_soft[idx] = 1;
  part_recv_port[idx] = 1;
  part_recv_rpn[idx] = 1;
  part_recv_nrpn[idx] = 1;

  idx += 1;
);

function lerp(fraction, value_min, value_max) local(value) (
  value = floor((value_min + (value_max - value_min) * fraction) + 0.5);
  min(max(value, value_min), value_max);
);

function lerp_unclamped(fraction, value_min, value_max) local(value) (
  value = floor((value_min + (value_max - value_min) * fraction) + 0.5);
);

function inverse_lerp(value, value_min, value_max) local(fraction) (
  fraction = (value - value_min) / (value_max - value_min);
  min(max(fraction, 0), 1);
);

function set_color(color) (
  gfx_r = ((color >> 16) & 0xff) / 255;
  gfx_g = ((color >> 8 ) & 0xff) / 255;
  gfx_b = ( color        & 0xff) / 255;
);

function sysex_clear_queue() (
  sysex_queue_ptr = 0;
);

function sysex_add_queue(address, value, length) (
  sysex_queue[sysex_queue_ptr + 0] = address;
  sysex_queue[sysex_queue_ptr + 1] = value;
  sysex_queue[sysex_queue_ptr + 2] = length;
  sysex_queue_ptr += 3;
);

function sysex_add_queue_multipart(address_part, address_parameter, value, length) (
  sysex_add_queue((0x08 << 16) | (address_part << 8) | (address_parameter << 0), value, length);
);

function sysex_add_queue_detune(address_part, value) local(msb, lsb) (
  msb = (value >> 4) & 0x0f;
  lsb =  value       & 0x0f;
  sysex_add_queue_multipart(address_part, 0x09, msb * 256 + lsb, 2);
);

function sysex_add_queue_delay(address, value) local(msb, lsb) (
  msb = floor(value / 128);
  lsb = value - (msb * 128);
  sysex_add_queue(address, msb * 256 + lsb, 2);
);

function xgsend_sysex(address, value, length) (
  address >= 0 ? (
    sysex_buf[0x00] = 0x43;                    // Yamaha ID
    sysex_buf[0x01] = 0x10;                    // device number
    sysex_buf[0x02] = 0x4c;                    // XG model ID
    sysex_buf[0x03] = (address >> 16) & 0x7f;  // address high
    sysex_buf[0x04] = (address >> 8 ) & 0x7f;  // address mid
    sysex_buf[0x05] =  address        & 0x7f;  // address low

    length == 1 ? (
      sysex_buf[0x06] = value & 0x7f;          // value lsb
      midisend_buf(sysex_delay, sysex_buf, 0x07);
    );

    length == 2 ? (
      sysex_buf[0x06] = (value >> 8) & 0x7f;   // value msb
      sysex_buf[0x07] =  value       & 0x7f;   // value lsb
      midisend_buf(sysex_delay, sysex_buf, 0x08);
    );

    sysex_delay += 1;
  );
);

function parse_number_dec(string, offset, length) local(dec_value) (
  dec_value = 0;

  loop (length,
    dec_value *= 10;
    dec_value += (str_getchar(string, offset) - 48);
    offset += 1;
  );

  dec_value;
);

function parse_to_line_end(string, offset) local(length) (
  length = strlen(string);
  while (str_getchar(string, offset) >= 32 && offset < length) (offset += 1);
  offset;
);

function parse_to_next_line(string, offset) local(length) (
  length = strlen(string);
  while (str_getchar(string, offset) < 32 && offset < length) (offset += 1);
  offset;
);

function escape_ampersand(string) local(offset, length, char) (
  strcpy(#temp, "");
  offset = 0;
  length = strlen(string);

  while (offset < length) (
    char = str_getchar(string, offset);
    char != 38 ? str_setchar(#temp, -0.1, char) : strcat(#temp, "&&");
    offset += 1;
  );

  #temp;
);

function get_value_display(value) local(format, table_len, table_ptr, table_ptr_old, table_value) (
  gui_value_table == param_value_names_empty ? (
    // @empty-formatter
    strcpy(#param_value, "");
  ) : gui_value_table == param_value_names_detune ? (
    // @detune-formatter
    value = (value - 128) / 10;
    format = value != 0 ? "%+.1f Hz" : "%.1f Hz";
    sprintf(#param_value, format, value);
  ) : gui_value_table == effect_value_names_21_delay_longtime ? (
    // @delay-formatter
    sprintf(#param_value, "%.1f ms", value / 10);
  ) : (
    table_len = strlen(gui_value_table);

    table_len > 0 ? (
      strcpy(#param_value, "not found");
      table_ptr = 1;

      while (table_ptr < table_len) (
        table_value = parse_number_dec(gui_value_table, table_ptr, 3);
        table_ptr += 4;
        table_ptr_old = table_ptr;
        table_ptr = parse_to_line_end(gui_value_table, table_ptr) + 1;

        table_value == value ? (
          strcpy_substr(#param_value, gui_value_table, table_ptr_old, table_ptr - table_ptr_old);
          table_ptr = table_len;
        );
      );
    ) : (
      sprintf(#param_value, "%i", value);
    );
  );

  #param_value;
);

function get_voice_category(category) local(category_count, list_len, list_ptr, list_ptr_old) (
  category_count = 0;

  strcpy(#category_name, "not found");
  list_ptr = 1;
  list_len = strlen(list_categories_voice);

  while (list_ptr < list_len) (
    list_ptr_old = list_ptr;
    list_ptr = parse_to_line_end(list_categories_voice, list_ptr);

    category_count == category ? (
      strcpy_substr(#category_name, list_categories_voice, list_ptr_old + 3, list_ptr - list_ptr_old - 3);
      list_ptr = list_len;
    );

    list_ptr += 1;
    category_count += 1;
  );

  #category_name;
);

function get_voice_list(category) local(list_voices) (
  list_voices = "";
  category == 0 ? list_voices = list_voices_piano;
  category == 1 ? list_voices = list_voices_chromatic_percussion;
  category == 2 ? list_voices = list_voices_organ;
  category == 3 ? list_voices = list_voices_guitar;
  category == 4 ? list_voices = list_voices_bass;
  category == 5 ? list_voices = list_voices_strings;
  category == 6 ? list_voices = list_voices_ensemble;
  category == 7 ? list_voices = list_voices_brass;
  category == 8 ? list_voices = list_voices_reed;
  category == 9 ? list_voices = list_voices_pipe;
  category == 10 ? list_voices = list_voices_ethnic;
  category == 11 ? list_voices = list_voices_synth_lead;
  category == 12 ? list_voices = list_voices_synth_pad;
  category == 13 ? list_voices = list_voices_synth_effects;
  category == 14 ? list_voices = list_voices_sound_effects;
  category == 15 ? list_voices = list_voices_percussive;
  category == 16 ? list_voices = list_voices_drum_kits;
  list_voices;
);

function get_voice_count(category) local(voice_count, list_voices, list_len, list_ptr) (
  list_voices = get_voice_list(category);
  list_ptr = 1;
  list_len = strlen(list_voices);
  voice_count = 0;

  while (list_ptr < list_len) (
    list_ptr = parse_to_line_end(list_voices, list_ptr);
    list_ptr += 1;
    voice_count += 1;
  );

  voice_count;
);

function change_voice(part, new_msb, new_lsb, new_program)
    local(category_count, voice_count, list_voices, list_len, list_ptr, list_ptr_old, program, msb, lsb, found) (
  found = 0;
  category_count = 0;

  while (category_count < 17 && !found) (
    list_voices = get_voice_list(category_count);
    list_ptr = 1;
    list_len = strlen(list_voices);
    voice_count = 0;

    while (list_ptr < list_len && !found) (
      list_ptr_old = list_ptr;
      list_ptr = parse_to_line_end(list_voices, list_ptr);
      list_ptr += 1;

      program = parse_number_dec(list_voices, list_ptr_old + 0, 3) - 1;
      msb = parse_number_dec(list_voices, list_ptr_old + 4, 3);
      lsb = parse_number_dec(list_voices, list_ptr_old + 8, 3);

      new_msb == msb && new_lsb == lsb && new_program == program ? (
        found = 1;
      );

      !found ? voice_count += 1;
    );

    !found ? category_count += 1;
  );

  found ? (
    voice_category[part] = category_count;
    voice_number[part] = voice_count;
    part_bank_msb[part] = msb;
    part_bank_lsb[part] = lsb;
    part_program[part] = program;
    gui_part_prev = -1;
  ) : (
    // continue using the current voice if the specified bank/program is not found
    sysex_add_queue_multipart(part, 0x01, part_bank_msb[part], 1);
    sysex_add_queue_multipart(part, 0x02, part_bank_lsb[part], 1);
    sysex_add_queue_multipart(part, 0x03, part_program[part], 1);
  );
);

function update_state_midi(midi_msg1, midi_msg2, midi_msg3) local(midi_status, midi_channel, part) (
  midi_status = midi_msg1 & 0xf0;
  midi_channel = midi_msg1 & 0x0f;
  part = 0;

  loop (16,
    part_rcv_channel[part] == midi_channel ? (
      // control change
      midi_status == 0xb0 && part_recv_cc[part] ? (
        midi_msg2 == 0 && part_recv_bs[part] ? incoming_bank_msb[part] = midi_msg3;
        midi_msg2 == 5 ? part_portamento_time[part] = midi_msg3;
        midi_msg2 == 7 && part_recv_vol[part] ? part_volume[part] = midi_msg3;
        midi_msg2 == 10 && part_recv_pan[part] ? part_pan[part] = midi_msg3;
        midi_msg2 == 32 && part_recv_bs[part] ? incoming_bank_lsb[part] = midi_msg3;
        midi_msg2 == 65 && part_recv_port[part] ? part_portamento_switch[part] = midi_msg3 >= 64;
        midi_msg2 == 71 ? part_filter_resonance[part] = midi_msg3;
        midi_msg2 == 72 ? part_eg_release[part] = midi_msg3;
        midi_msg2 == 73 ? part_eg_attack[part] = midi_msg3;
        midi_msg2 == 74 ? part_filter_cutoff[part] = midi_msg3;
        midi_msg2 == 75 ? part_eg_decay[part] = midi_msg3;
        midi_msg2 == 76 ? part_vibrato_rate[part] = midi_msg3;
        midi_msg2 == 77 ? part_vibrato_depth[part] = midi_msg3;
        midi_msg2 == 78 ? part_vibrato_delay[part] = midi_msg3;
        midi_msg2 == 91 ? part_reverb_send[part] = midi_msg3;
        midi_msg2 == 93 ? part_chorus_send[part] = midi_msg3;
        midi_msg2 == 94 ? part_variation_send[part] = midi_msg3;
      );

      // channel mode
      midi_status == 0xb0 ? (
        midi_msg2 == 126 && midi_msg3 <= 16 ? part_mode[part] = 0;  // mono
        midi_msg2 == 127 && midi_msg3 == 0 ? part_mode[part] = 1;   // poly
      );

      // program change
      midi_status == 0xc0 && part_recv_pc[part] ? (
        change_voice(part, incoming_bank_msb[part], incoming_bank_lsb[part], midi_msg2);
      );
    );

    part += 1;
  );
);

function gui_param_focused() (
  gui_focus_x >= 0 && gui_focus_y >= 0;
);

function gui_mouse_over(item_x, item_width, item_y, item_height) (
  !gui_param_focused() && mouse_x >= item_x && mouse_x < item_x + item_width && mouse_y >= item_y && mouse_y < item_y + item_height;
);

function gui_slider(value, value_min, value_max, name, value_def, is_bipolar)
    local(value_old, value_fraction, fill_width, fill_offset, name_width, name_height) (
  value_old = value;
  value < 0 ? value = value_def;

  // slider input
  gui_mouse_over(gui_control_x - 4, gui_slider_width + 8, gui_control_y - 4, gui_slider_height + 8) ? (
    value += sign(mouse_wheel);

    gui_mouse_left == 1 && !gui_key_ctrl ? (
      gui_focus_x = gui_control_x;
      gui_focus_y = gui_control_y;
    );

    gui_mouse_right == 1 || (gui_mouse_left == 1 && gui_key_ctrl) ? (
      value = value_def;
    );
  );

  gui_mouse_left > 0 && gui_control_x == gui_focus_x && gui_control_y == gui_focus_y ? (
    value_fraction = (mouse_x - gui_control_x) / gui_slider_width;
    value = lerp(value_fraction, value_min, value_max);
  );

  value = min(max(value, value_min), value_max);

  // slider background
  set_color(color_bg_darker);
  gfx_rect(gui_control_x, gui_control_y, gui_slider_width, gui_slider_height);

  // slider fill
  value == value_def ? set_color(color_bg_cursor);
  value != value_def ? set_color(color_bg_changed);
  value_fraction = inverse_lerp(value, value_min, value_max);

  is_bipolar ? (
    fill_width = abs(floor((gui_slider_halfwidth * ((value_fraction * 2.0) - 1.0)) + 0.5));
    fill_offset = value_fraction < 0.5 ? floor((gui_slider_width * value_fraction) + 0.5) : gui_slider_halfwidth;
    gfx_rect(gui_control_x + fill_offset, gui_control_y, fill_width, gui_slider_height);  // bipolar fill
    gfx_rect(gui_control_x + gui_slider_halfwidth, gui_control_y, 1, gui_slider_height);  // center notch
  ) : (
    fill_width = floor((gui_slider_width * value_fraction) + 0.5);
    gfx_rect(gui_control_x, gui_control_y, fill_width, gui_slider_height);
  );

  // slider name
  value == value_def ? set_color(color_fg_list);
  value != value_def ? set_color(color_bg_changed);
  gfx_measurestr(name, name_width, name_height);
  gfx_x = gui_control_x - name_width - 8;
  gfx_y = gui_control_y - 6;
  gfx_drawstr(name);

  // slider value
  gfx_x = gui_control_x + gui_slider_width + 5;
  gfx_drawstr(get_value_display(value));

  gui_control_y += gui_slider_spacing;
  gui_value_change = midi_force_update | (value != value_old);
  value;
);

function gui_switch(value, value_min, value_max, name, value_def)
    local(value_old, option_idx, option_count, option_width, option_value, option_x, option_y, option_name, name_width, name_height) (
  value_old = value;
  value < 0 && value_def >= 0 ? value = value_def;
  option_count = value_max - value_min + 1;
  option_width = (gui_switch_width - (gui_switch_margin * (option_count - 1))) / option_count;
  gfx_setfont(font_small);

  option_idx = 0;

  loop (option_count,
    option_value = value_min + option_idx;
    option_x = gui_control_x + ((option_width + gui_switch_margin) * option_idx);
    option_y = gui_control_y - 3;

    // option input
    gui_mouse_over(option_x - 4, option_width + 8, option_y - 4, gui_switch_height + 8) ? (
      value += sign(mouse_wheel);

      gui_mouse_left == 1 && !gui_key_ctrl ? (
        gui_focus_x = gui_control_x;
        gui_focus_y = gui_control_y;

        option_count > 2 ? (
          value = option_value;
        ) : (
          value = !value;
        );
      );

      gui_mouse_right == 1 || (gui_mouse_left == 1 && gui_key_ctrl) ? (
        value_def >= 0 ? value = value_def;
      );

      value = min(max(value, value_min), value_max);
    );

    // option fill
    set_color(color_bg_darker);
    option_value == value && value == value_def ? set_color(color_bg_cursor);
    option_value == value && value != value_def ? set_color(color_bg_changed);
    option_value == value && value_def < 0 ? set_color(color_bg_cursor);
    gfx_rect(option_x, option_y, option_width, gui_switch_height);

    // option name
    option_value == value ? set_color(color_bg_darker) : set_color(color_fg_menu);
    option_name = get_value_display(option_value);
    gfx_measurestr(option_name, name_width, name_height);
    gfx_x = option_x + (option_width / 2) - (name_width / 2);
    gfx_y = option_y + (gui_switch_height / 2) - (name_height / 2) - 1;
    gfx_drawstr(option_name);

    option_idx += 1;
  );

  // switch name
  value == value_def || value_def < 0 ? set_color(color_fg_list) : set_color(color_bg_changed);
  gfx_setfont(font_default);
  gfx_measurestr(name, name_width, name_height);
  gfx_x = gui_control_x - name_width - 8;
  gfx_y = gui_control_y - 6;
  gfx_drawstr(name);

  gui_control_y += gui_slider_spacing;
  gui_value_change = midi_force_update | (value != value_old);
  value;
);

// mode 0: check if mouse is down, 1: check for single click, 2: check for hovering
function gui_menu_item(item_x, item_y, item_name, item_selected, mode) local(item_width, item_height) (
  gfx_x = item_x;
  gfx_y = item_y;

  gfx_measurestr(item_name, item_width, item_height);

  item_selected ? (
    set_color(color_bg_dark);
    gfx_rect(gfx_x - 8, gfx_y - 4, item_width + 16, item_height + 8);
    set_color(color_bg_cursor);
  ) : (
    set_color(color_fg_menu);
  );

  item_selected = 0;

  mode >= 0 && gui_mouse_over(item_x - 8, item_width + 16, item_y - 4, item_height + 8) ? (
    set_color(color_bg_cursor);

    mode == 0 ? (
      gui_mouse_left > 0 ? item_selected |= 1;
      gui_mouse_right > 0 ? item_selected |= 2;
    );

    mode == 1 ? (
      gui_mouse_left == 1 ? item_selected |= 1;
      gui_mouse_right == 1 ? item_selected |= 2;
    );

    mode == 2 ? item_selected = 1;
  );

  gfx_drawstr(item_name);
  item_selected;
);

function gui_category(list, cursor, offset, highlight)
    local(list_x, list_y, list_hover, category_count, category_render_count, list_len, list_ptr, list_ptr_old) (
  list_x = 0;
  list_y = gui_menu_height + 20;

  category_count = 0;
  category_render_count = 0;

  list_ptr = 1;
  list_len = strlen(list);

  while (list_ptr < list_len) (
    list_ptr_old = list_ptr;
    list_ptr = parse_to_line_end(list, list_ptr);

    strcpy_substr(#category_name, list, list_ptr_old + 3, list_ptr - list_ptr_old - 3);
    list_ptr += 1;

    category_count >= offset ? (
      category_render_count < gui_categories_visible ? (
        list_hover = 0;
        gfx_x = list_x + 16;
        gfx_y = list_y + 2;

        category_count == cursor ? (
          list_hover = 1;
          gfx_x -= 4;
          set_color(color_bg_light);
          gfx_rect(list_x, list_y, gui_categories_width, gui_list_item_height);
        );

        category_count == highlight ? (
          set_color(color_bg_cursor);
          gfx_rect(0, list_y, 8, gui_list_item_height);
        );

        gui_mouse_over(list_x, gui_categories_width, list_y, gui_list_item_height) ? (
          gui_mouse_left == 1 ? cursor = category_count;
          list_hover = 1;
        );

        list_hover ? set_color(color_bg_cursor) : set_color(color_fg_menu);
        gfx_drawstr(#category_name);

        category_render_count += 1;
      );

      list_y += gui_list_item_height;
    );

    category_count += 1;
  );

  gui_categories_count = category_count;

  gui_mouse_over(0, gui_categories_width, gui_menu_height, gfx_h) ? (
    cursor -= sign(mouse_wheel);
    cursor = min(max(cursor, 0), category_count - 1);
  );

  cursor;
);

function gui_category_adjust_view(offset, cursor, cursor_prev) local(item_x, item_y) (
  gui_categories_visible > 0 && (cursor != cursor_prev || gui_page != gui_page_prev) ? (
    // makes sure the selected item is always visible
    offset = min(max(offset, cursor - gui_categories_visible + 1), cursor);
  );

  item_x = 16;
  item_y = gui_menu_height + 22 - gui_list_item_height;

  offset > 0 ? (
    gui_menu_item(item_x, item_y, "                 ↑                 ", 0, 0) ? offset -= 1;
  );

  item_y = gui_menu_height + 24 + gui_categories_visible * gui_list_item_height;

  gui_categories_visible < gui_categories_count && (offset + gui_categories_visible) < gui_categories_count ? (
    gui_menu_item(item_x, item_y, "                 ↓                 ", 0, 0) ? offset += 1;
  );

  min(max(offset, 0), gui_categories_count - gui_categories_visible);
);

function gui_slider_list(list, cursor, effect_type)
    local(entry, entry_ptr, list_len, list_ptr, list_ptr_old, id, param_number, param_offset, param_min, param_max, param_def, param_table, param_type, sysex_addr, sysex_size) (
  entry = -1;
  entry_ptr = -1;
  list_ptr = 1;
  list_len = strlen(list);

  while (list_ptr < list_len) (
    id = str_getchar(list, list_ptr);

    id == 0x23 ? (  // seek for #
      entry = parse_number_dec(list, list_ptr + 1, 2);
    );

    list_ptr = parse_to_line_end(list, list_ptr);
    list_ptr = parse_to_next_line(list, list_ptr);

    entry == cursor ? (
      entry_ptr = list_ptr;
      list_ptr = list_len;
    );
  );

  entry_ptr >= 0 ? (
    list_ptr = entry_ptr;

    while (list_ptr < list_len) (
      param_number = parse_number_dec(list, list_ptr + 0, 2);
      param_offset = effect_type * 42 * 16 + entry * 16 + param_number;

      param_min   = parse_number_dec(list, list_ptr + 3, 5);
      param_max   = parse_number_dec(list, list_ptr + 9, 5);
      param_def   = parse_number_dec(list, list_ptr + 15, 5);
      param_table = str_getchar(list, list_ptr + 21);
      param_type  = parse_number_dec(list, list_ptr + 23, 1);

      gui_value_table = "";

      param_table == 0x31 ? gui_value_table = effect_value_names_1_lfo_frequency;
      param_table == 0x32 ? gui_value_table = effect_value_names_2_delay_offset;
      param_table == 0x33 ? gui_value_table = effect_value_names_3_eq_frequency;
      param_table == 0x34 ? gui_value_table = effect_value_names_4_reverb_time;
      param_table == 0x35 ? gui_value_table = effect_value_names_5_delay_time;
      param_table == 0x36 ? gui_value_table = effect_value_names_6_room_size;
      param_table == 0x37 ? gui_value_table = effect_value_names_7_delay_time;
      param_table == 0x38 ? gui_value_table = effect_value_names_8_reverb_wdh;
      param_table == 0x39 ? gui_value_table = effect_value_names_9_stereo;
      param_table == 0x41 ? gui_value_table = effect_value_names_10_ref_type;
      param_table == 0x42 ? gui_value_table = effect_value_names_11_pan_direction;
      param_table == 0x43 ? gui_value_table = effect_value_names_12_mono_stereo;
      param_table == 0x44 ? gui_value_table = effect_value_names_13_amp_type;
      param_table == 0x45 ? gui_value_table = effect_value_names_14_eq_gain;
      param_table == 0x46 ? gui_value_table = effect_value_names_15_er_rev;
      param_table == 0x47 ? gui_value_table = effect_value_names_16_lfo_phase_diff;
      param_table == 0x48 ? gui_value_table = effect_value_names_17_gate_type;
      param_table == 0x49 ? gui_value_table = effect_value_names_18_generic;
      param_table == 0x4A ? gui_value_table = effect_value_names_19_high_damp;
      param_table == 0x4B ? gui_value_table = effect_value_names_20_mid_width;
      param_table == 0x4C ? gui_value_table = effect_value_names_21_delay_longtime;

      list_ptr += 25;
      list_ptr_old = list_ptr;
      list_ptr = parse_to_line_end(list, list_ptr);
      strcpy_substr(#param_name, list, list_ptr_old, list_ptr - list_ptr_old);
      list_ptr = parse_to_next_line(list, list_ptr);

      param_type == 2 ? (
        effect_params[param_offset] = gui_switch(effect_params[param_offset], param_min, param_max, #param_name, param_def);
      ) : (
        effect_params[param_offset] = gui_slider(effect_params[param_offset], param_min, param_max, #param_name, param_def, param_type == 1);
      );

      gui_value_change ? (
        sysex_size = 1;

        effect_type == 0 ? (  // reverb
          param_number == 1 ? sysex_addr = 0x020102;
          param_number == 2 ? sysex_addr = 0x020103;
          param_number == 3 ? sysex_addr = 0x020104;
          param_number == 4 ? sysex_addr = 0x020105;
          param_number == 5 ? sysex_addr = 0x020106;
          param_number == 6 ? sysex_addr = 0x020107;
          param_number == 7 ? sysex_addr = 0x020108;
          param_number == 8 ? sysex_addr = 0x020109;
          param_number == 9 ? sysex_addr = 0x02010a;
          param_number == 10 ? sysex_addr = 0x02010b;
          param_number == 11 ? sysex_addr = 0x020110;
          param_number == 12 ? sysex_addr = 0x020111;
          param_number == 13 ? sysex_addr = 0x020112;
          param_number == 14 ? sysex_addr = 0x020113;
          param_number == 15 ? sysex_addr = 0x020114;
          param_number == 16 ? sysex_addr = 0x020115;
        );

        effect_type == 1 ? (  // chorus
          param_number == 1 ? sysex_addr = 0x020122;
          param_number == 2 ? sysex_addr = 0x020123;
          param_number == 3 ? sysex_addr = 0x020124;
          param_number == 4 ? sysex_addr = 0x020125;
          param_number == 5 ? sysex_addr = 0x020126;
          param_number == 6 ? sysex_addr = 0x020127;
          param_number == 7 ? sysex_addr = 0x020128;
          param_number == 8 ? sysex_addr = 0x020129;
          param_number == 9 ? sysex_addr = 0x02012a;
          param_number == 10 ? sysex_addr = 0x02012b;
          param_number == 11 ? sysex_addr = 0x020130;
          param_number == 12 ? sysex_addr = 0x020131;
          param_number == 13 ? sysex_addr = 0x020132;
          param_number == 14 ? sysex_addr = 0x020133;
          param_number == 15 ? sysex_addr = 0x020134;
          param_number == 16 ? sysex_addr = 0x020135;
        );

        effect_type == 2 ? (  // variation
          param_number >= 1 && param_number <= 10 ? sysex_size = 2;
          param_number == 1 ? sysex_addr = 0x020142;
          param_number == 2 ? sysex_addr = 0x020144;
          param_number == 3 ? sysex_addr = 0x020146;
          param_number == 4 ? sysex_addr = 0x020148;
          param_number == 5 ? sysex_addr = 0x02014a;
          param_number == 6 ? sysex_addr = 0x02014c;
          param_number == 7 ? sysex_addr = 0x02014e;
          param_number == 8 ? sysex_addr = 0x020150;
          param_number == 9 ? sysex_addr = 0x020152;
          param_number == 10 ? sysex_addr = 0x020154;
          param_number == 11 ? sysex_addr = 0x020170;
          param_number == 12 ? sysex_addr = 0x020171;
          param_number == 13 ? sysex_addr = 0x020172;
          param_number == 14 ? sysex_addr = 0x020173;
          param_number == 15 ? sysex_addr = 0x020174;
          param_number == 16 ? sysex_addr = 0x020175;
        );

        param_type == 3 ? (
          sysex_add_queue_delay(sysex_addr, effect_params[param_offset]);
        ) : (
          sysex_add_queue(sysex_addr, effect_params[param_offset], sysex_size);
        );
      );

      str_getchar(list, list_ptr) == 0x23 ? list_ptr = list_len;
    );
  );
);

// align 0: center, 1: bottom, 2: left
function gui_overview_cell(text, size, color, align, has_border) local(cell_width, text_width, text_height) (
  cell_width = floor(gui_overview_cell_width * size);
  gfx_measurestr(text, text_width, text_height);

  align <= 1 ? (
    gfx_x = gui_control_x + (cell_width / 2) - (text_width / 2);
  ) : (
    gfx_x = gui_control_x + 7;
  );

  align != 1 ? (
    gfx_y = gui_control_y + (gui_overview_cell_height / 2) - (text_height / 2)
  ) : (
    gfx_y = gui_control_y + gui_overview_cell_height - text_height - 3;
  );

  set_color(color);
  gfx_drawstr(text);

  has_border ? (
    set_color(color_bg_darker);
    gfx_line(gui_control_x, gui_control_y, gui_control_x, gui_control_y + gui_overview_cell_height);
  );

  gui_control_x += cell_width;
);

function gui_overview_header(name, size) (
  gui_overview_cell(name, size, color_fg_menu, 1, 0);
);

function gui_overview_header_group(name, size) local(original_x, original_y, cell_width) (
  original_x = gui_control_x;
  original_y = gui_control_y;
  gui_control_y -= 27;

  // render bracket
  set_color(color_fg_bracket);
  cell_width = floor(gui_overview_cell_width * size);
  gfx_x = gui_control_x + 10;
  gfx_y = gui_control_y + gui_overview_cell_height + 4;
  gfx_lineto(gfx_x, gfx_y - 7);
  gfx_lineto(gfx_x + cell_width - 20, gfx_y);
  gfx_lineto(gfx_x, gfx_y + 7);

  gui_overview_header(name, size);
  gui_control_x = original_x;
  gui_control_y = original_y;
);

function gui_overview_voice_menu(part)
    local(category_count, voice_count, list_voices, list_len, list_ptr, list_ptr_old, selection) (
  category_count = 0;
  strcpy(#voice_menu, "");
  strcpy(#voice_menu_item, "");

  while (category_count < 17) (
    list_voices = get_voice_list(category_count);
    list_ptr = 1;
    list_len = strlen(list_voices);
    voice_count = 0;

    category_count == voice_category[part] ? strcat(#voice_menu, "!");
    strcat(#voice_menu, ">");
    strcat(#voice_menu, get_voice_category(category_count));
    strcat(#voice_menu, "|");

    while (list_ptr < list_len) (
      list_ptr_old = list_ptr;
      list_ptr = parse_to_line_end(list_voices, list_ptr);
      strcpy_substr(#voice_menu_item, list_voices, list_ptr_old + 12, list_ptr - list_ptr_old - 12);
      list_ptr += 1;

      category_count == voice_category[part] && voice_count == voice_number[part] ? strcat(#voice_menu, "!");
      list_ptr >= list_len ? strcat(#voice_menu, "<");
      strcat(#voice_menu, escape_ampersand(#voice_menu_item));
      strcat(#voice_menu, "|");

      voice_count += 1;
    );

    category_count += 1;
  );

  gfx_x = mouse_x;
  gfx_y = mouse_y;

  spinlock.unlock();
  selection = gfx_showmenu(#voice_menu);
  spinlock.lock();

  selection;
);

function gui_overview_voice(part)
    local(category_change, voice_change, category_count, voice_count, list_voices, list_len, list_ptr, list_ptr_old) (
  voice_change = -1;
  category_change = -1;

  strcpy(#voice_name, "not found");
  list_voices = get_voice_list(voice_category[part]);
  list_ptr = 1;
  list_len = strlen(list_voices);
  voice_count = 0;

  // get voice name and voice count
  while (list_ptr < list_len) (
    list_ptr_old = list_ptr;
    list_ptr = parse_to_line_end(list_voices, list_ptr);

    voice_count == voice_number[part] ? (
      strcpy_substr(#voice_name, list_voices, list_ptr_old + 12, list_ptr - list_ptr_old - 12);
    );

    list_ptr += 1;
    voice_count += 1;
  );

  // handle input
  gui_mouse_over(gui_control_x, gui_overview_cell_width * 4, gui_control_y, gui_overview_cell_height) ? (
    mouse_wheel != 0 ? (
      voice_change = voice_number[part];
      voice_change -= sign(mouse_wheel);
      category_change = voice_category[part];

      // move to next category
      voice_change >= voice_count ? (
        voice_change = 0;
        category_change += 1;
      );

      // move to prev category
      voice_change < 0 ? (
        voice_change = 1000;  // Hack: select the category's last voice
        category_change -= 1;
      );
    );

    // voice menu
    gui_mouse_left == 1 ? (
      voice_change = gui_overview_voice_menu(part);

      voice_change > 0 ? (
        category_count = 0;

        while (category_count < 17) (
          voice_count = get_voice_count(category_count);

          voice_change > voice_count ? (
            voice_change -= voice_count;
            category_count += 1;
          ) : (
            category_change = category_count;
            category_count = 17;
          );
        );
      );

      voice_change -= 1;
    );
  );

  // handle voice changes
  voice_change >= 0 ? (
    list_voices = get_voice_list(category_change);
    list_ptr = 1;
    list_len = strlen(list_voices);
    voice_count = 0;

    while (list_ptr < list_len) (
      list_ptr_old = list_ptr;
      list_ptr = parse_to_line_end(list_voices, list_ptr);
      list_ptr += 1;

      voice_count == voice_change || list_ptr >= list_len ? (
        voice_number[part] = voice_count;
        voice_category[part] = category_change;

        part_program[part] = parse_number_dec(list_voices, list_ptr_old + 0, 3) - 1;
        part_bank_msb[part] = parse_number_dec(list_voices, list_ptr_old + 4, 3);
        part_bank_lsb[part] = parse_number_dec(list_voices, list_ptr_old + 8, 3);

        sysex_add_queue_multipart(part, 0x01, part_bank_msb[part], 1);
        sysex_add_queue_multipart(part, 0x02, part_bank_lsb[part], 1);
        sysex_add_queue_multipart(part, 0x03, part_program[part], 1);

        list_ptr = list_len;
      );

      voice_count += 1;
    );
  );

  gui_overview_cell(#voice_name, 4, color_fg_list, 2, 1);
);

function gui_overview_param(value, value_min, value_max, value_def) local(value_old, value_range, drag_offset, color) (
  value_old = value;
  value < 0 ? value = value_def;
  value_range = value_max - value_min;

  // param input
  gui_mouse_over(gui_control_x, gui_overview_cell_width, gui_control_y, gui_overview_cell_height) ? (
    value += sign(mouse_wheel);

    gui_mouse_left == 1 && !gui_key_ctrl ? (
      gui_focus_x = gui_control_x;
      gui_focus_y = gui_control_y;

      value_range > 2 ? (
        gui_drag_center = mouse_y;
        gui_drag_value = value;
      ) : (
        value = !value;
      );
    );

    gui_mouse_right == 1 || (gui_mouse_left == 1 && gui_key_ctrl) ? (
      value = value_def;
    );
  );

  gui_mouse_left > 0 && gui_control_x == gui_focus_x && gui_control_y == gui_focus_y && value_range > 2 ? (
    drag_offset = (gui_drag_center - mouse_y) / gui_drag_range;
    value = gui_drag_value + lerp_unclamped(drag_offset, 0, value_range);
  );

  value = min(max(value, value_min), value_max);

  // param value
  #param_value = get_value_display(value);
  color = value == value_def ? color_fg_list : color_bg_changed;
  gui_overview_cell(#param_value, 1, color, 0, 1);

  gui_value_change = midi_force_update | (value != value_old);
  value;
);

function gui_overview_slider(value, value_min, value_max, value_def, is_bipolar, size)
    local(original_x, original_y, original_width, cell_width) (
  original_x = gui_control_x;
  original_y = gui_control_y;
  original_width = gui_slider_width;

  cell_width = floor(gui_overview_cell_width * size);
  gui_slider_width = cell_width - 16;
  gui_slider_halfwidth = gui_slider_width * 0.5;
  gui_control_x += (cell_width / 2) - (gui_slider_width / 2);
  gui_control_y += (gui_overview_cell_height / 2) - (gui_slider_height / 2);
  value = gui_slider(value, value_min, value_max, "", value_def, is_bipolar);

  gui_control_x = original_x;
  gui_control_y = original_y;
  gui_slider_width = original_width;
  gui_slider_halfwidth = gui_slider_width * 0.5;
  gui_overview_cell("", size, 0x0, 0, 1);

  value;
);

function gui_pages()
    local(part, list_x, list_y, list_hover, voice_change, voice_count, list_voices, list_len, list_ptr, list_ptr_old, msb, lsb, value) (
  midi_force_update = 0;

  // overview -----------------------------------------------------------------

  gui_page == 0 && !midi_first_time ? (
    gui_control_x = 247;
    gui_control_y = 52;

    gui_value_table = param_value_names_overview_mode;
    gui_overview_mode = gui_switch(gui_overview_mode, 0, 1, "", -1);

    gfx_setfont(font_smaller);
    gui_control_x = 0;
    gui_control_y = gui_menu_height + gui_overview_header_height - gui_overview_cell_height;

    // mixing mode
    gui_overview_mode == 0 ? (
      gui_overview_header("Part", 1);
      gui_overview_header("Voice", 4);
      gui_overview_header_group("Filter", 2);
      gui_overview_header("Cutoff", 1);
      gui_overview_header("Reso", 1);
      gui_overview_header_group("Envelope", 3);
      gui_overview_header("Atk", 1);
      gui_overview_header("Dec", 1);
      gui_overview_header("Rls", 1);
      gui_overview_header_group("FX", 4);
      gui_overview_header("Rev", 1);
      gui_overview_header("Cho", 1);
      gui_overview_header("Var", 1);
      gui_overview_header("Dry", 1);
      gui_overview_header("Pan", 1.55);
      gui_overview_header("Volume", 1.55);

      part = 0;

      loop (16,
        gui_control_x = 0;
        gui_control_y += gui_overview_cell_height;

        sprintf(#temp, "%i", part + 1);
        gui_overview_cell(#temp, 1, color_fg_menu, 0, 0);

        gui_overview_voice(part);

        gui_value_table = effect_value_names_18_generic;
        part_filter_cutoff[part] = gui_overview_param(part_filter_cutoff[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x18, part_filter_cutoff[part], 1);

        part_filter_resonance[part] = gui_overview_param(part_filter_resonance[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x19, part_filter_resonance[part], 1);

        part_eg_attack[part] = gui_overview_param(part_eg_attack[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x1a, part_eg_attack[part], 1);

        part_eg_decay[part] = gui_overview_param(part_eg_decay[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x1b, part_eg_decay[part], 1);

        part_eg_release[part] = gui_overview_param(part_eg_release[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x1c, part_eg_release[part], 1);

        gui_value_table = "";
        part_reverb_send[part] = gui_overview_param(part_reverb_send[part], 0, 127, 40);
        gui_value_change ? sysex_add_queue_multipart(part, 0x13, part_reverb_send[part], 1);

        part_chorus_send[part] = gui_overview_param(part_chorus_send[part], 0, 127, 0);
        gui_value_change ? sysex_add_queue_multipart(part, 0x12, part_chorus_send[part], 1);

        part_variation_send[part] = gui_overview_param(part_variation_send[part], 0, 127, 0);
        gui_value_change ? sysex_add_queue_multipart(part, 0x14, part_variation_send[part], 1);

        part_dry_level[part] = gui_overview_param(part_dry_level[part], 0, 127, 127);
        gui_value_change ? sysex_add_queue_multipart(part, 0x11, part_dry_level[part], 1);

        gui_value_table = param_value_names_empty;
        part_pan[part] = gui_overview_slider(part_pan[part], 0, 127, 64, 1, 1.55);
        gui_value_change ? sysex_add_queue_multipart(part, 0x0e, part_pan[part], 1);

        part_volume[part] = gui_overview_slider(part_volume[part], 0, 127, 100, 0, 1.55);
        gui_value_change ? sysex_add_queue_multipart(part, 0x0b, part_volume[part], 1);

        part += 1;
      );
    );

    // performance mode
    gui_overview_mode == 1 ? (
      gui_overview_header("Part", 1);
      gui_overview_header("Voice", 4);
      gui_overview_header("Chan", 1);
      gui_overview_header("Mode", 1);
      gui_overview_header_group("Porta", 2);
      gui_overview_header("Active", 1);
      gui_overview_header("Time", 1);
      gui_overview_header_group("Vibrato", 3);
      gui_overview_header("Rate", 1);
      gui_overview_header("Depth", 1);
      gui_overview_header(" Delay", 1);
      gui_overview_header_group("Note", 3);
      gui_overview_header("Shift", 1);
      gui_overview_header("Low", 1);
      gui_overview_header("High", 1);
      gui_overview_header_group("Velocity", 2);
      gui_overview_header("Depth", 1);
      gui_overview_header(" Offset", 1);

      part = 0;

      loop (16,
        gui_control_x = 0;
        gui_control_y += gui_overview_cell_height;

        sprintf(#temp, "%i", part + 1);
        gui_overview_cell(#temp, 1, color_fg_menu, 0, 0);

        gui_overview_voice(part);

        gui_value_table = param_value_names_channel;
        part_rcv_channel[part] = gui_overview_param(part_rcv_channel[part], 0, 15, part);
        gui_value_change ? sysex_add_queue_multipart(part, 0x04, part_rcv_channel[part], 1);

        gui_value_table = param_value_names_mono_poly;
        part_mode[part] = gui_overview_param(part_mode[part], 0, 1, 1);
        gui_value_change ? sysex_add_queue_multipart(part, 0x05, part_mode[part], 1);

        gui_value_table = param_value_names_off_on;
        part_portamento_switch[part] = gui_overview_param(part_portamento_switch[part], 0, 1, 0);
        gui_value_change ? sysex_add_queue_multipart(part, 0x67, part_portamento_switch[part], 1);

        gui_value_table = "";
        part_portamento_time[part] = gui_overview_param(part_portamento_time[part], 0, 127, 0);
        gui_value_change ? sysex_add_queue_multipart(part, 0x68, part_portamento_time[part], 1);

        gui_value_table = effect_value_names_18_generic;
        part_vibrato_rate[part] = gui_overview_param(part_vibrato_rate[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x15, part_vibrato_rate[part], 1);

        part_vibrato_depth[part] = gui_overview_param(part_vibrato_depth[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x16, part_vibrato_depth[part], 1);

        part_vibrato_delay[part] = gui_overview_param(part_vibrato_delay[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x17, part_vibrato_delay[part], 1);

        gui_value_table = param_value_names_semitones;
        part_note_shift[part] = gui_overview_param(part_note_shift[part], 40, 88, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x08, part_note_shift[part], 1);

        gui_value_table = param_value_names_notes;
        part_note_limit_low[part] = gui_overview_param(part_note_limit_low[part], 0, 127, 0);
        gui_value_change ? sysex_add_queue_multipart(part, 0x0f, part_note_limit_low[part], 1);

        part_note_limit_high[part] = gui_overview_param(part_note_limit_high[part], 0, 127, 127);
        gui_value_change ? sysex_add_queue_multipart(part, 0x10, part_note_limit_high[part], 1);

        gui_value_table = "";
        part_velocity_sense_depth[part] = gui_overview_param(part_velocity_sense_depth[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x0c, part_velocity_sense_depth[part], 1);

        part_velocity_sense_offset[part] = gui_overview_param(part_velocity_sense_offset[part], 0, 127, 64);
        gui_value_change ? sysex_add_queue_multipart(part, 0x0d, part_velocity_sense_offset[part], 1);

        part += 1;
      );
    );
  );

  // voice list ---------------------------------------------------------------

  gui_page == 1 && !midi_first_time ? (
    gui_categories_voice_cursor = gui_category(list_categories_voice, gui_categories_voice_cursor, gui_categories_voice_offset, voice_category[gui_part]);
    gui_categories_voice_offset = gui_category_adjust_view(gui_categories_voice_offset, gui_categories_voice_cursor, gui_categories_voice_cursor_prev);

    list_voices = get_voice_list(gui_categories_voice_cursor);
    list_x = gui_categories_width + 10 - gui_list_item_width;
    list_y = gfx_h;

    voice_change = -1;

    list_ptr = 1;
    voice_count = 0;
    list_len = strlen(list_voices);

    // render voices
    while (list_ptr < list_len) (
      list_y + gui_list_item_height >= gfx_h ? (
        list_y = gui_menu_height + 10;
        list_x += gui_list_item_width;
      );

      list_ptr_old = list_ptr;
      list_ptr = parse_to_line_end(list_voices, list_ptr);
      strcpy_substr(#voice_name, list_voices, list_ptr_old + 12, list_ptr - list_ptr_old - 12);
      list_ptr += 1;

      list_hover = 0;

      voice_count == voice_number[gui_part] && gui_categories_voice_cursor == voice_category[gui_part] ? (
        list_hover = 1;
        set_color(color_bg_voice);
        gfx_rect(list_x, list_y, gui_list_item_width, gui_list_item_height);
      );

      gui_mouse_over(list_x, gui_list_item_width, list_y, gui_list_item_height) ? (
        gui_mouse_left == 1 ? voice_change = voice_count;
        list_hover = 1;
      );

      list_hover ? set_color(color_bg_cursor) : set_color(color_fg_list);

      gfx_x = list_x + 7;
      gfx_y = list_y + 2;

      gfx_drawstr(#voice_name);

      voice_count += 1;
      list_y += gui_list_item_height;
    );

    gui_mouse_over(gui_categories_width, gfx_w, gui_menu_height, gfx_h) ? (
      mouse_wheel != 0 ? (
        voice_change = voice_number[gui_part];
        voice_change -= sign(mouse_wheel);
        voice_change = min(max(voice_change, 0), voice_count - 1);
      );
    );

    // handle voice changes
    voice_change >= 0 && (voice_change != voice_number[gui_part] || gui_categories_voice_cursor != voice_category[gui_part]) ? (
      list_ptr = 1;
      voice_count = 0;

      while (list_ptr < list_len) (
        list_ptr_old = list_ptr;
        list_ptr = parse_to_line_end(list_voices, list_ptr);
        list_ptr += 1;

        voice_count == voice_change ? (
          voice_number[gui_part] = voice_count;
          voice_category[gui_part] = gui_categories_voice_cursor;

          part_program[gui_part] = parse_number_dec(list_voices, list_ptr_old + 0, 3) - 1;
          part_bank_msb[gui_part] = parse_number_dec(list_voices, list_ptr_old + 4, 3);
          part_bank_lsb[gui_part] = parse_number_dec(list_voices, list_ptr_old + 8, 3);

          sysex_add_queue_multipart(gui_part, 0x01, part_bank_msb[gui_part], 1);
          sysex_add_queue_multipart(gui_part, 0x02, part_bank_lsb[gui_part], 1);
          sysex_add_queue_multipart(gui_part, 0x03, part_program[gui_part], 1);
        );

        voice_count += 1;
      );
    );

    gui_categories_voice_cursor_prev = gui_categories_voice_cursor;
  );

  // part editor --------------------------------------------------------------

  gui_page == 2 && !midi_first_time ? (
    gui_categories_editor_cursor = gui_category(list_categories_editor, gui_categories_editor_cursor, gui_categories_editor_offset, gui_categories_editor_cursor);
    gui_categories_editor_offset = gui_category_adjust_view(gui_categories_editor_offset, gui_categories_editor_cursor, gui_categories_editor_cursor_prev);

    gui_control_x = gui_categories_width + 190;
    gui_control_y = gui_menu_height + 20;

    // common parameters
    gui_categories_editor_cursor == 0 ? (
      gui_value_table = param_value_names_channel;
      part_rcv_channel[gui_part] = gui_slider(part_rcv_channel[gui_part], 0, 15, "Receive Channel", gui_part, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x04, part_rcv_channel[gui_part], 1);

      gui_value_table = param_value_names_mono_poly;
      part_mode[gui_part] = gui_switch(part_mode[gui_part], 0, 1, "Mode", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x05, part_mode[gui_part], 1);

      gui_value_table = param_value_names_off_on;
      part_portamento_switch[gui_part] = gui_switch(part_portamento_switch[gui_part], 0, 1, "Portamento", 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x67, part_portamento_switch[gui_part], 1);

      gui_value_table = "";
      part_portamento_time[gui_part] = gui_slider(part_portamento_time[gui_part], 0, 127, "Portamento Time", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x68, part_portamento_time[gui_part], 1);

      gui_control_y += 25;

      part_volume[gui_part] = gui_slider(part_volume[gui_part], 0, 127, "Volume", 100, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x0b, part_volume[gui_part], 1);

      gui_value_table = param_value_names_pan;
      part_pan[gui_part] = gui_slider(part_pan[gui_part], 0, 127, "Pan", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x0e, part_pan[gui_part], 1);

      gui_value_table = param_value_names_semitones;
      part_note_shift[gui_part] = gui_slider(part_note_shift[gui_part], 40, 88, "Note Shift", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x08, part_note_shift[gui_part], 1);

      gui_value_table = param_value_names_detune;
      part_detune[gui_part] = gui_slider(part_detune[gui_part], 0, 255, "Detune", 128, 1);
      gui_value_change ? sysex_add_queue_detune(gui_part, part_detune[gui_part]);

      gui_control_y += 25;

      gui_value_table = effect_value_names_18_generic;
      part_filter_cutoff[gui_part] = gui_slider(part_filter_cutoff[gui_part], 0, 127, "Filter Cutoff", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x18, part_filter_cutoff[gui_part], 1);

      part_filter_resonance[gui_part] = gui_slider(part_filter_resonance[gui_part], 0, 127, "Filter Resonance", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x19, part_filter_resonance[gui_part], 1);

      gui_control_y += 25;

      part_eg_attack[gui_part] = gui_slider(part_eg_attack[gui_part], 0, 127, "EG Attack", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x1a, part_eg_attack[gui_part], 1);

      part_eg_decay[gui_part] = gui_slider(part_eg_decay[gui_part], 0, 127, "EG Decay", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x1b, part_eg_decay[gui_part], 1);

      part_eg_release[gui_part] = gui_slider(part_eg_release[gui_part], 0, 127, "EG Release", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x1c, part_eg_release[gui_part], 1);

      gui_control_y += 25;

      part_pitch_eg_init_level[gui_part] = gui_slider(part_pitch_eg_init_level[gui_part], 0, 127, "Pitch EG Init Level", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x69, part_pitch_eg_init_level[gui_part], 1);

      part_pitch_eg_attack[gui_part] = gui_slider(part_pitch_eg_attack[gui_part], 0, 127, "Pitch EG Attack", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x6a, part_pitch_eg_attack[gui_part], 1);

      part_pitch_eg_release_level[gui_part] = gui_slider(part_pitch_eg_release_level[gui_part], 0, 127, "Pitch EG Release Level", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x6b, part_pitch_eg_release_level[gui_part], 1);

      part_pitch_eg_release[gui_part] = gui_slider(part_pitch_eg_release[gui_part], 0, 127, "Pitch EG Release", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x6c, part_pitch_eg_release[gui_part], 1);

      gui_control_y += 25;

      gui_value_table = "";
      part_reverb_send[gui_part] = gui_slider(part_reverb_send[gui_part], 0, 127, "Reverb Send", 40, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x13, part_reverb_send[gui_part], 1);

      part_chorus_send[gui_part] = gui_slider(part_chorus_send[gui_part], 0, 127, "Chorus Send", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x12, part_chorus_send[gui_part], 1);

      part_variation_send[gui_part] = gui_slider(part_variation_send[gui_part], 0, 127, "Variation Send", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x14, part_variation_send[gui_part], 1);

      part_dry_level[gui_part] = gui_slider(part_dry_level[gui_part], 0, 127, "Dry", 127, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x11, part_dry_level[gui_part], 1);
    );

    // modulation parameters
    gui_categories_editor_cursor == 1 ? (
      gui_value_table = effect_value_names_18_generic;
      part_vibrato_rate[gui_part] = gui_slider(part_vibrato_rate[gui_part], 0, 127, "Vibrato Rate", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x15, part_vibrato_rate[gui_part], 1);

      part_vibrato_depth[gui_part] = gui_slider(part_vibrato_depth[gui_part], 0, 127, "Vibrato Depth", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x16, part_vibrato_depth[gui_part], 1);

      part_vibrato_delay[gui_part] = gui_slider(part_vibrato_delay[gui_part], 0, 127, "Vibrato Delay", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x17, part_vibrato_delay[gui_part], 1);

      gui_control_y += 25;

      gui_value_table = param_value_names_semitones;
      part_bend_pitch_control[gui_part] = gui_slider(part_bend_pitch_control[gui_part], 40, 88, "PB Pitch Control", 66, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x23, part_bend_pitch_control[gui_part], 1);

      gui_value_table = param_value_names_filter_mod;
      part_bend_filter_control[gui_part] = gui_slider(part_bend_filter_control[gui_part], 0, 127, "PB Filter Control", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x24, part_bend_filter_control[gui_part], 1);

      gui_value_table = param_value_names_percent;
      part_bend_amplitude_control[gui_part] = gui_slider(part_bend_amplitude_control[gui_part], 0, 127, "PB Amp Control", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x25, part_bend_amplitude_control[gui_part], 1);

      gui_value_table = "";
      part_bend_lfo_pmod_depth[gui_part] = gui_slider(part_bend_lfo_pmod_depth[gui_part], 0, 127, "PB LFO Pitch Depth", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x26, part_bend_lfo_pmod_depth[gui_part], 1);

      part_bend_lfo_fmod_depth[gui_part] = gui_slider(part_bend_lfo_fmod_depth[gui_part], 0, 127, "PB LFO Filter Depth", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x27, part_bend_lfo_fmod_depth[gui_part], 1);

      part_bend_lfo_amod_depth[gui_part] = gui_slider(part_bend_lfo_amod_depth[gui_part], 0, 127, "PB LFO Amp Depth", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x28, part_bend_lfo_amod_depth[gui_part], 1);

      gui_control_y += 25;

      gui_value_table = param_value_names_semitones;
      part_mw_pitch_control[gui_part] = gui_slider(part_mw_pitch_control[gui_part], 40, 88, "MW Pitch Control", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x1d, part_mw_pitch_control[gui_part], 1);

      gui_value_table = param_value_names_filter_mod;
      part_mw_filter_control[gui_part] = gui_slider(part_mw_filter_control[gui_part], 0, 127, "MW Filter Control", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x1e, part_mw_filter_control[gui_part], 1);

      gui_value_table = param_value_names_percent;
      part_mw_amplitude_control[gui_part] = gui_slider(part_mw_amplitude_control[gui_part], 0, 127, "MW Amp Control", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x1f, part_mw_amplitude_control[gui_part], 1);

      gui_value_table = "";
      part_mw_lfo_pmod_depth[gui_part] = gui_slider(part_mw_lfo_pmod_depth[gui_part], 0, 127, "MW LFO Pitch Depth", 10, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x20, part_mw_lfo_pmod_depth[gui_part], 1);

      part_mw_lfo_fmod_depth[gui_part] = gui_slider(part_mw_lfo_fmod_depth[gui_part], 0, 127, "MW LFO Filter Depth", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x21, part_mw_lfo_fmod_depth[gui_part], 1);

      part_mw_lfo_amod_depth[gui_part] = gui_slider(part_mw_lfo_amod_depth[gui_part], 0, 127, "MW LFO Amp Depth", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x22, part_mw_lfo_amod_depth[gui_part], 1);

      gui_control_y += 25;

      // these control both channel and poly aftertouch assignments (because why the hell not)!
      gui_value_table = param_value_names_semitones;
      part_at_pitch_control[gui_part] = gui_slider(part_at_pitch_control[gui_part], 40, 88, "AT Pitch Control", 64, 1);
      gui_value_change ? (
        sysex_add_queue_multipart(gui_part, 0x4d, part_at_pitch_control[gui_part], 1);
        sysex_add_queue_multipart(gui_part, 0x53, part_at_pitch_control[gui_part], 1);
      );

      gui_value_table = param_value_names_filter_mod;
      part_at_filter_control[gui_part] = gui_slider(part_at_filter_control[gui_part], 0, 127, "AT Filter Control", 64, 1);
      gui_value_change ? (
        sysex_add_queue_multipart(gui_part, 0x4e, part_at_filter_control[gui_part], 1);
        sysex_add_queue_multipart(gui_part, 0x54, part_at_filter_control[gui_part], 1);
      );

      gui_value_table = param_value_names_percent;
      part_at_amplitude_control[gui_part] = gui_slider(part_at_amplitude_control[gui_part], 0, 127, "AT Amp Control", 64, 1);
      gui_value_change ? (
        sysex_add_queue_multipart(gui_part, 0x4f, part_at_amplitude_control[gui_part], 1);
        sysex_add_queue_multipart(gui_part, 0x55, part_at_amplitude_control[gui_part], 1);
      );

      gui_value_table = "";
      part_at_lfo_pmod_depth[gui_part] = gui_slider(part_at_lfo_pmod_depth[gui_part], 0, 127, "AT LFO Pitch Depth", 0, 0);
      gui_value_change ? (
        sysex_add_queue_multipart(gui_part, 0x50, part_at_lfo_pmod_depth[gui_part], 1);
        sysex_add_queue_multipart(gui_part, 0x56, part_at_lfo_pmod_depth[gui_part], 1);
      );

      part_at_lfo_fmod_depth[gui_part] = gui_slider(part_at_lfo_fmod_depth[gui_part], 0, 127, "AT LFO Filter Depth", 0, 0);
      gui_value_change ? (
        sysex_add_queue_multipart(gui_part, 0x51, part_at_lfo_fmod_depth[gui_part], 1);
        sysex_add_queue_multipart(gui_part, 0x57, part_at_lfo_fmod_depth[gui_part], 1);
      );

      part_at_lfo_amod_depth[gui_part] = gui_slider(part_at_lfo_amod_depth[gui_part], 0, 127, "AT LFO Amp Depth", 0, 0);
      gui_value_change ? (
        sysex_add_queue_multipart(gui_part, 0x52, part_at_lfo_amod_depth[gui_part], 1);
        sysex_add_queue_multipart(gui_part, 0x58, part_at_lfo_amod_depth[gui_part], 1);
      );
    );

    // keyboard parameters
    gui_categories_editor_cursor == 2 ? (
      gui_value_table = param_value_names_notes;
      part_note_limit_low[gui_part] = gui_slider(part_note_limit_low[gui_part], 0, 127, "Note Limit Low", 0, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x0f, part_note_limit_low[gui_part], 1);

      part_note_limit_high[gui_part] = gui_slider(part_note_limit_high[gui_part], 0, 127, "Note Limit High", 127, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x10, part_note_limit_high[gui_part], 1);

      gui_control_y += 25;

      gui_value_table = "";
      part_velocity_limit_low[gui_part] = gui_slider(part_velocity_limit_low[gui_part], 1, 127, "Velocity Limit Low", 1, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x6d, part_velocity_limit_low[gui_part], 1);

      part_velocity_limit_high[gui_part] = gui_slider(part_velocity_limit_high[gui_part], 1, 127, "Velocity Limit High", 127, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x6e, part_velocity_limit_high[gui_part], 1);

      gui_control_y += 25;

      part_velocity_sense_depth[gui_part] = gui_slider(part_velocity_sense_depth[gui_part], 0, 127, "Velocity Sense Depth", 64, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x0c, part_velocity_sense_depth[gui_part], 1);

      part_velocity_sense_offset[gui_part] = gui_slider(part_velocity_sense_offset[gui_part], 0, 127, "Velocity Sense Offset", 64, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x0d, part_velocity_sense_offset[gui_part], 1);

      gui_control_y += 25;

      gui_value_table = param_value_names_same_note_assign;
      part_same_note_assign[gui_part] = gui_switch(part_same_note_assign[gui_part], 0, 2, "Same Note Assign", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x06, part_same_note_assign[gui_part], 1);

      gui_value_table = "";
      part_element_reserve[gui_part] = gui_slider(part_element_reserve[gui_part], 0, 32, "Element Reserve", gui_part == 9 ? 0 : 2, 0);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x00, part_element_reserve[gui_part], 1);
    );

    // tuning parameters
    gui_categories_editor_cursor == 3 ? (
      gui_value_table = effect_value_names_18_generic;

      part_scale_c[gui_part] = gui_slider(part_scale_c[gui_part], 0, 127, "C", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x41, part_scale_c[gui_part], 1);

      part_scale_cs[gui_part] = gui_slider(part_scale_cs[gui_part], 0, 127, "C#", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x42, part_scale_cs[gui_part], 1);

      part_scale_d[gui_part] = gui_slider(part_scale_d[gui_part], 0, 127, "D", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x43, part_scale_d[gui_part], 1);

      part_scale_ds[gui_part] = gui_slider(part_scale_ds[gui_part], 0, 127, "D#", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x44, part_scale_ds[gui_part], 1);

      part_scale_e[gui_part] = gui_slider(part_scale_e[gui_part], 0, 127, "E", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x45, part_scale_e[gui_part], 1);

      part_scale_f[gui_part] = gui_slider(part_scale_f[gui_part], 0, 127, "F", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x46, part_scale_f[gui_part], 1);

      part_scale_fs[gui_part] = gui_slider(part_scale_fs[gui_part], 0, 127, "F#", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x47, part_scale_fs[gui_part], 1);

      part_scale_g[gui_part] = gui_slider(part_scale_g[gui_part], 0, 127, "G", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x48, part_scale_g[gui_part], 1);

      part_scale_gs[gui_part] = gui_slider(part_scale_gs[gui_part], 0, 127, "G#", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x49, part_scale_gs[gui_part], 1);

      part_scale_a[gui_part] = gui_slider(part_scale_a[gui_part], 0, 127, "A", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x4a, part_scale_a[gui_part], 1);

      part_scale_as[gui_part] = gui_slider(part_scale_as[gui_part], 0, 127, "A#", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x4b, part_scale_as[gui_part], 1);

      part_scale_b[gui_part] = gui_slider(part_scale_b[gui_part], 0, 127, "B", 64, 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x4c, part_scale_b[gui_part], 1);
    );

    // MIDI filter parameters
    gui_categories_editor_cursor == 4 ? (
      gui_value_table = param_value_names_off_on;

      part_recv_note[gui_part] = gui_switch(part_recv_note[gui_part], 0, 1, "Note On/Off", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x35, part_recv_note[gui_part], 1);

      part_recv_pc[gui_part] = gui_switch(part_recv_pc[gui_part], 0, 1, "Program Change", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x32, part_recv_pc[gui_part], 1);

      part_recv_bs[gui_part] = gui_switch(part_recv_bs[gui_part], 0, 1, "Bank Select", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x40, part_recv_bs[gui_part], 1);

      part_recv_cat[gui_part] = gui_switch(part_recv_cat[gui_part], 0, 1, "Channel AT", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x31, part_recv_cat[gui_part], 1);

      part_recv_pat[gui_part] = gui_switch(part_recv_pat[gui_part], 0, 1, "Poly AT", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x34, part_recv_pat[gui_part], 1);

      part_recv_pb[gui_part] = gui_switch(part_recv_pb[gui_part], 0, 1, "Pitch Bend", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x30, part_recv_pb[gui_part], 1);

      part_recv_cc[gui_part] = gui_switch(part_recv_cc[gui_part], 0, 1, "Control Change", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x33, part_recv_cc[gui_part], 1);

      part_recv_mod[gui_part] = gui_switch(part_recv_mod[gui_part], 0, 1, "Modulation", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x38, part_recv_mod[gui_part], 1);

      part_recv_vol[gui_part] = gui_switch(part_recv_vol[gui_part], 0, 1, "Volume", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x39, part_recv_vol[gui_part], 1);

      part_recv_pan[gui_part] = gui_switch(part_recv_pan[gui_part], 0, 1, "Pan", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x3a, part_recv_pan[gui_part], 1);

      part_recv_exp[gui_part] = gui_switch(part_recv_exp[gui_part], 0, 1, "Expression", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x3b, part_recv_exp[gui_part], 1);

      part_recv_sus[gui_part] = gui_switch(part_recv_sus[gui_part], 0, 1, "Sustain Pedal", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x3c, part_recv_sus[gui_part], 1);

      part_recv_sost[gui_part] = gui_switch(part_recv_sost[gui_part], 0, 1, "Sostenuto Pedal", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x3e, part_recv_sost[gui_part], 1);

      part_recv_soft[gui_part] = gui_switch(part_recv_soft[gui_part], 0, 1, "Soft Pedal", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x3f, part_recv_soft[gui_part], 1);

      part_recv_port[gui_part] = gui_switch(part_recv_port[gui_part], 0, 1, "Portamento", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x3d, part_recv_port[gui_part], 1);

      part_recv_rpn[gui_part] = gui_switch(part_recv_rpn[gui_part], 0, 1, "RPN", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x36, part_recv_rpn[gui_part], 1);

      part_recv_nrpn[gui_part] = gui_switch(part_recv_nrpn[gui_part], 0, 1, "NRPN", 1);
      gui_value_change ? sysex_add_queue_multipart(gui_part, 0x37, part_recv_nrpn[gui_part], 1);
    );

    gui_categories_editor_cursor_prev = gui_categories_editor_cursor;
  );

  // reverb editor ------------------------------------------------------------

  gui_page == 3 || gui_categories_reverb_cursor_prev < 0 ? (
    gui_categories_reverb_cursor = gui_category(list_categories_reverb, gui_categories_reverb_cursor, gui_categories_reverb_offset, gui_categories_reverb_cursor);
    gui_categories_reverb_offset = gui_category_adjust_view(gui_categories_reverb_offset, gui_categories_reverb_cursor, gui_categories_reverb_cursor_prev);

    gui_categories_reverb_cursor != gui_categories_reverb_cursor_prev ? (
      gui_categories_reverb_cursor == 0 ? value = 0x0000;
      gui_categories_reverb_cursor == 1 ? value = 0x0100;
      gui_categories_reverb_cursor == 2 ? value = 0x0101;
      gui_categories_reverb_cursor == 3 ? value = 0x0200;
      gui_categories_reverb_cursor == 4 ? value = 0x0201;
      gui_categories_reverb_cursor == 5 ? value = 0x0202;
      gui_categories_reverb_cursor == 6 ? value = 0x0300;
      gui_categories_reverb_cursor == 7 ? value = 0x0301;
      gui_categories_reverb_cursor == 8 ? value = 0x0400;
      gui_categories_reverb_cursor == 9 ? value = 0x1000;
      gui_categories_reverb_cursor == 10 ? value = 0x1100;
      gui_categories_reverb_cursor == 11 ? value = 0x1300;

      sysex_add_queue(0x020100, value, 2);
      midi_force_update = 1;
    ) : (
      midi_force_update = 0;
    );

    gui_categories_reverb_cursor > 0 ? (
      gui_control_x = gui_categories_width + 190;
      gui_control_y = gui_menu_height + 20;

      gui_value_table = param_value_names_send_return;
      effect_reverb_return = gui_slider(effect_reverb_return, 0, 127, "Return", 64, 1);
      gui_value_change ? sysex_add_queue(0x02010c, effect_reverb_return, 1);

      gui_value_table = param_value_names_pan;
      effect_reverb_pan = gui_slider(effect_reverb_pan, 1, 127, "Pan", 64, 1);
      gui_value_change ? sysex_add_queue(0x02010d, effect_reverb_pan, 1);

      gui_control_y += 25;

      gui_slider_list(list_params_reverb, gui_categories_reverb_cursor - 1, 0);
    );

    gui_categories_reverb_cursor_prev = gui_categories_reverb_cursor;
  );

  // chorus editor ------------------------------------------------------------

  gui_page == 4 || gui_categories_chorus_cursor_prev < 0 ? (
    gui_categories_chorus_cursor = gui_category(list_categories_chorus, gui_categories_chorus_cursor, gui_categories_chorus_offset, gui_categories_chorus_cursor);
    gui_categories_chorus_offset = gui_category_adjust_view(gui_categories_chorus_offset, gui_categories_chorus_cursor, gui_categories_chorus_cursor_prev);

    gui_categories_chorus_cursor != gui_categories_chorus_cursor_prev ? (
      gui_categories_chorus_cursor == 0 ? value = 0x0000;
      gui_categories_chorus_cursor == 1 ? value = 0x4100;
      gui_categories_chorus_cursor == 2 ? value = 0x4101;
      gui_categories_chorus_cursor == 3 ? value = 0x4102;
      gui_categories_chorus_cursor == 4 ? value = 0x4108;
      gui_categories_chorus_cursor == 5 ? value = 0x4200;
      gui_categories_chorus_cursor == 6 ? value = 0x4201;
      gui_categories_chorus_cursor == 7 ? value = 0x4202;
      gui_categories_chorus_cursor == 8 ? value = 0x4208;
      gui_categories_chorus_cursor == 9 ? value = 0x4300;
      gui_categories_chorus_cursor == 10 ? value = 0x4301;
      gui_categories_chorus_cursor == 11 ? value = 0x4308;

      sysex_add_queue(0x020120, value, 2);
      midi_force_update = 1;
    ) : (
      midi_force_update = 0;
    );

    gui_categories_chorus_cursor > 0 ? (
      gui_control_x = gui_categories_width + 190;
      gui_control_y = gui_menu_height + 20;

      gui_value_table = param_value_names_send_return;
      effect_chorus_return = gui_slider(effect_chorus_return, 0, 127, "Return", 64, 1);
      gui_value_change ? sysex_add_queue(0x02012c, effect_chorus_return, 1);

      gui_value_table = param_value_names_pan;
      effect_chorus_pan = gui_slider(effect_chorus_pan, 1, 127, "Pan", 64, 1);
      gui_value_change ? sysex_add_queue(0x02012d, effect_chorus_pan, 1);

      gui_value_table = param_value_names_send_return;
      effect_chorus_send_reverb = gui_slider(effect_chorus_send_reverb, 0, 127, "Reverb Send", 0, 0);
      gui_value_change ? sysex_add_queue(0x02012e, effect_chorus_send_reverb, 1);

      gui_control_y += 25;

      gui_slider_list(list_params_chorus, gui_categories_chorus_cursor - 1, 1);
    );

    gui_categories_chorus_cursor_prev = gui_categories_chorus_cursor;
  );

  // variation editor ---------------------------------------------------------

  gui_page == 5 || gui_categories_variation_cursor_prev < 0 ? (
    gui_categories_variation_cursor = gui_category(list_categories_variation, gui_categories_variation_cursor, gui_categories_variation_offset, gui_categories_variation_cursor);
    gui_categories_variation_offset = gui_category_adjust_view(gui_categories_variation_offset, gui_categories_variation_cursor, gui_categories_variation_cursor_prev);

    gui_categories_variation_cursor != gui_categories_variation_cursor_prev ? (
      gui_categories_variation_cursor == 0 ? value = 0x0000;
      gui_categories_variation_cursor == 1 ? value = 0x0100;
      gui_categories_variation_cursor == 2 ? value = 0x0101;
      gui_categories_variation_cursor == 3 ? value = 0x0200;
      gui_categories_variation_cursor == 4 ? value = 0x0201;
      gui_categories_variation_cursor == 5 ? value = 0x0202;
      gui_categories_variation_cursor == 6 ? value = 0x0300;
      gui_categories_variation_cursor == 7 ? value = 0x0301;
      gui_categories_variation_cursor == 8 ? value = 0x0400;
      gui_categories_variation_cursor == 9 ? value = 0x0500;
      gui_categories_variation_cursor == 10 ? value = 0x0600;
      gui_categories_variation_cursor == 11 ? value = 0x0700;
      gui_categories_variation_cursor == 12 ? value = 0x0800;
      gui_categories_variation_cursor == 13 ? value = 0x0900;
      gui_categories_variation_cursor == 14 ? value = 0x0901;
      gui_categories_variation_cursor == 15 ? value = 0x0a00;
      gui_categories_variation_cursor == 16 ? value = 0x0b00;
      gui_categories_variation_cursor == 17 ? value = 0x1400;
      gui_categories_variation_cursor == 18 ? value = 0x1401;
      gui_categories_variation_cursor == 19 ? value = 0x1402;
      gui_categories_variation_cursor == 20 ? value = 0x4100;
      gui_categories_variation_cursor == 21 ? value = 0x4101;
      gui_categories_variation_cursor == 22 ? value = 0x4102;
      gui_categories_variation_cursor == 23 ? value = 0x4108;
      gui_categories_variation_cursor == 24 ? value = 0x4200;
      gui_categories_variation_cursor == 25 ? value = 0x4201;
      gui_categories_variation_cursor == 26 ? value = 0x4202;
      gui_categories_variation_cursor == 27 ? value = 0x4208;
      gui_categories_variation_cursor == 28 ? value = 0x4300;
      gui_categories_variation_cursor == 29 ? value = 0x4301;
      gui_categories_variation_cursor == 30 ? value = 0x4308;
      gui_categories_variation_cursor == 31 ? value = 0x4400;
      gui_categories_variation_cursor == 32 ? value = 0x4500;
      gui_categories_variation_cursor == 33 ? value = 0x4600;
      gui_categories_variation_cursor == 34 ? value = 0x4700;
      gui_categories_variation_cursor == 35 ? value = 0x4800;
      gui_categories_variation_cursor == 36 ? value = 0x4808;
      gui_categories_variation_cursor == 37 ? value = 0x4900;
      gui_categories_variation_cursor == 38 ? value = 0x4a00;
      gui_categories_variation_cursor == 39 ? value = 0x4b00;
      gui_categories_variation_cursor == 40 ? value = 0x4c00;
      gui_categories_variation_cursor == 41 ? value = 0x4d00;
      gui_categories_variation_cursor == 42 ? value = 0x4e00;

      sysex_add_queue(0x020140, value, 2);
      midi_force_update = 1;
    ) : (
      midi_force_update = 0;
    );

    gui_categories_variation_cursor > 0 ? (
      gui_control_x = gui_categories_width + 190;
      gui_control_y = gui_menu_height + 20;

      gui_value_table = param_value_names_send_return;
      effect_variation_return = gui_slider(effect_variation_return, 0, 127, "Return", 64, 1);
      gui_value_change ? sysex_add_queue(0x020156, effect_variation_return, 1);

      gui_value_table = param_value_names_pan;
      effect_variation_pan = gui_slider(effect_variation_pan, 1, 127, "Pan", 64, 1);
      gui_value_change ? sysex_add_queue(0x020157, effect_variation_pan, 1);

      gui_value_table = param_value_names_send_return;
      effect_variation_send_reverb = gui_slider(effect_variation_send_reverb, 0, 127, "Reverb Send", 0, 0);
      gui_value_change ? sysex_add_queue(0x020158, effect_variation_send_reverb, 1);

      effect_variation_send_chorus = gui_slider(effect_variation_send_chorus, 0, 127, "Chorus Send", 0, 0);
      gui_value_change ? sysex_add_queue(0x020159, effect_variation_send_chorus, 1);

      gui_control_y += 25;

      gui_slider_list(list_params_variation, gui_categories_variation_cursor - 1, 2);
    );

    gui_categories_variation_cursor_prev = gui_categories_variation_cursor;
  );
);

function gui_restore() (
  midi_first_time = 1;
  gui_page_prev = -1;
  gui_part_prev = -1;
  gui_categories_voice_cursor_prev = -1;
  gui_categories_editor_cursor_prev = -1;
  gui_categories_reverb_cursor_prev = -1;
  gui_categories_chorus_cursor_prev = -1;
  gui_categories_variation_cursor_prev = -1;
);


@serialize

spinlock.lock();

file_version = 1;
file_var(0, file_version);

// gui state
file_var(0, gui_page);
file_var(0, gui_part);

file_var(0, gui_overview_mode);
file_var(0, gui_categories_voice_cursor);
file_var(0, gui_categories_editor_cursor);
file_var(0, gui_categories_reverb_cursor);
file_var(0, gui_categories_chorus_cursor);
file_var(0, gui_categories_variation_cursor);

// effect parameters
file_var(0, effect_reverb_return);
file_var(0, effect_chorus_return);
file_var(0, effect_variation_return);

file_var(0, effect_reverb_pan);
file_var(0, effect_chorus_pan);
file_var(0, effect_variation_pan);

file_var(0, effect_chorus_send_reverb);
file_var(0, effect_variation_send_reverb);
file_var(0, effect_variation_send_chorus);

file_mem(0, effect_params, 42 * 16 * 3);

// voice parameters
file_mem(0, voice_category, 16);
file_mem(0, voice_number, 16);
file_mem(0, part_bank_msb, 16);
file_mem(0, part_bank_lsb, 16);
file_mem(0, part_program, 16);

// common parameters
file_mem(0, part_rcv_channel, 16);
file_mem(0, part_mode, 16);
file_mem(0, part_portamento_switch, 16);
file_mem(0, part_portamento_time, 16);
file_mem(0, part_volume, 16);
file_mem(0, part_pan, 16);
file_mem(0, part_note_shift, 16);
file_mem(0, part_detune, 16);
file_mem(0, part_filter_cutoff, 16);
file_mem(0, part_filter_resonance, 16);
file_mem(0, part_eg_attack, 16);
file_mem(0, part_eg_decay, 16);
file_mem(0, part_eg_release, 16);
file_mem(0, part_pitch_eg_init_level, 16);
file_mem(0, part_pitch_eg_attack, 16);
file_mem(0, part_pitch_eg_release_level, 16);
file_mem(0, part_pitch_eg_release, 16);
file_mem(0, part_reverb_send, 16);
file_mem(0, part_chorus_send, 16);
file_mem(0, part_variation_send, 16);
file_mem(0, part_dry_level, 16);

// modulation parameters
file_mem(0, part_vibrato_rate, 16);
file_mem(0, part_vibrato_depth, 16);
file_mem(0, part_vibrato_delay, 16);
file_mem(0, part_bend_pitch_control, 16);
file_mem(0, part_bend_filter_control, 16);
file_mem(0, part_bend_amplitude_control, 16);
file_mem(0, part_bend_lfo_pmod_depth, 16);
file_mem(0, part_bend_lfo_fmod_depth, 16);
file_mem(0, part_bend_lfo_amod_depth, 16);
file_mem(0, part_mw_pitch_control, 16);
file_mem(0, part_mw_filter_control, 16);
file_mem(0, part_mw_amplitude_control, 16);
file_mem(0, part_mw_lfo_pmod_depth, 16);
file_mem(0, part_mw_lfo_fmod_depth, 16);
file_mem(0, part_mw_lfo_amod_depth, 16);
file_mem(0, part_at_pitch_control, 16);
file_mem(0, part_at_filter_control, 16);
file_mem(0, part_at_amplitude_control, 16);
file_mem(0, part_at_lfo_pmod_depth, 16);
file_mem(0, part_at_lfo_fmod_depth, 16);
file_mem(0, part_at_lfo_amod_depth, 16);

// keyboard parameters
file_mem(0, part_note_limit_low, 16);
file_mem(0, part_note_limit_high, 16);
file_mem(0, part_velocity_limit_low, 16);
file_mem(0, part_velocity_limit_high, 16);
file_mem(0, part_velocity_sense_depth, 16);
file_mem(0, part_velocity_sense_offset, 16);
file_mem(0, part_same_note_assign, 16);
file_mem(0, part_element_reserve, 16);

// tuning parameters
file_mem(0, part_scale_c, 16);
file_mem(0, part_scale_cs, 16);
file_mem(0, part_scale_d, 16);
file_mem(0, part_scale_ds, 16);
file_mem(0, part_scale_e, 16);
file_mem(0, part_scale_f, 16);
file_mem(0, part_scale_fs, 16);
file_mem(0, part_scale_g, 16);
file_mem(0, part_scale_gs, 16);
file_mem(0, part_scale_a, 16);
file_mem(0, part_scale_as, 16);
file_mem(0, part_scale_b, 16);

// MIDI filter parameters
file_mem(0, part_recv_note, 16);
file_mem(0, part_recv_pc, 16);
file_mem(0, part_recv_bs, 16);
file_mem(0, part_recv_cat, 16);
file_mem(0, part_recv_pat, 16);
file_mem(0, part_recv_pb, 16);
file_mem(0, part_recv_cc, 16);
file_mem(0, part_recv_mod, 16);
file_mem(0, part_recv_vol, 16);
file_mem(0, part_recv_pan, 16);
file_mem(0, part_recv_exp, 16);
file_mem(0, part_recv_sus, 16);
file_mem(0, part_recv_sost, 16);
file_mem(0, part_recv_soft, 16);
file_mem(0, part_recv_port, 16);
file_mem(0, part_recv_rpn, 16);
file_mem(0, part_recv_nrpn, 16);

// force update after data was loaded
file_avail(0) >= 0 ? (
  gui_restore();
);

spinlock.unlock();


@block

while (midirecv(midi_offset, midi_msg1, midi_msg2, midi_msg3)) (
  midi_status = midi_msg1 & 0xf0;

  // add incoming midi control/program changes to queue
  midi_status == 0xb0 || midi_status == 0xc0 ? (
    incoming_cc_queue[incoming_cc_queue_ptr + 0] = midi_msg1;
    incoming_cc_queue[incoming_cc_queue_ptr + 1] = midi_msg2;
    incoming_cc_queue[incoming_cc_queue_ptr + 2] = midi_msg3;
    incoming_cc_queue_ptr += 3;

    // send outgoing sysex messages after incoming midi
    sysex_delay = max(sysex_delay, midi_offset + 1);
  );

  // passthrough events
  midisend(midi_offset, midi_msg1, midi_msg2, midi_msg3);
);

// update state on incoming midi data
incoming_cc_queue_ptr > 0 ? (
  spinlock.lock();
  incoming_cc_queue_len = incoming_cc_queue_ptr;
  incoming_cc_queue_ptr = 0;

  while (incoming_cc_queue_ptr < incoming_cc_queue_len) (
    midi_msg1 = incoming_cc_queue[incoming_cc_queue_ptr + 0];
    midi_msg2 = incoming_cc_queue[incoming_cc_queue_ptr + 1];
    midi_msg3 = incoming_cc_queue[incoming_cc_queue_ptr + 2];
    update_state_midi(midi_msg1, midi_msg2, midi_msg3);
    incoming_cc_queue_ptr += 3;
  );

  incoming_cc_queue_ptr = 0;
  spinlock.unlock();
);

// restore all parameters
midi_first_time ? (
  spinlock.lock();
  midi_first_time = 0;
  sysex_clear_queue();
  sysex_add_queue(0x02015a, 1, 1);  // set variation connection to system
  gui_pages();                      // restore effect parameters

  idx = 0;

  loop (16,
    // restore voice parameters
    sysex_add_queue_multipart(idx, 0x01, part_bank_msb[idx], 1);
    sysex_add_queue_multipart(idx, 0x02, part_bank_lsb[idx], 1);
    sysex_add_queue_multipart(idx, 0x03, part_program[idx], 1);

    // restore common parameters
    sysex_add_queue_multipart(idx, 0x04, part_rcv_channel[idx], 1);
    sysex_add_queue_multipart(idx, 0x05, part_mode[idx], 1);
    sysex_add_queue_multipart(idx, 0x67, part_portamento_switch[idx], 1);
    sysex_add_queue_multipart(idx, 0x68, part_portamento_time[idx], 1);
    sysex_add_queue_multipart(idx, 0x0b, part_volume[idx], 1);
    sysex_add_queue_multipart(idx, 0x0e, part_pan[idx], 1);
    sysex_add_queue_multipart(idx, 0x08, part_note_shift[idx], 1);
    sysex_add_queue_detune(idx, part_detune[idx]);
    sysex_add_queue_multipart(idx, 0x18, part_filter_cutoff[idx], 1);
    sysex_add_queue_multipart(idx, 0x19, part_filter_resonance[idx], 1);
    sysex_add_queue_multipart(idx, 0x1a, part_eg_attack[idx], 1);
    sysex_add_queue_multipart(idx, 0x1b, part_eg_decay[idx], 1);
    sysex_add_queue_multipart(idx, 0x1c, part_eg_release[idx], 1);
    sysex_add_queue_multipart(idx, 0x69, part_pitch_eg_init_level[idx], 1);
    sysex_add_queue_multipart(idx, 0x6a, part_pitch_eg_attack[idx], 1);
    sysex_add_queue_multipart(idx, 0x6b, part_pitch_eg_release_level[idx], 1);
    sysex_add_queue_multipart(idx, 0x6c, part_pitch_eg_release[idx], 1);
    sysex_add_queue_multipart(idx, 0x13, part_reverb_send[idx], 1);
    sysex_add_queue_multipart(idx, 0x12, part_chorus_send[idx], 1);
    sysex_add_queue_multipart(idx, 0x14, part_variation_send[idx], 1);
    sysex_add_queue_multipart(idx, 0x11, part_dry_level[idx], 1);

    // restore modulation parameters
    sysex_add_queue_multipart(idx, 0x15, part_vibrato_rate[idx], 1);
    sysex_add_queue_multipart(idx, 0x16, part_vibrato_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x17, part_vibrato_delay[idx], 1);
    sysex_add_queue_multipart(idx, 0x23, part_bend_pitch_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x24, part_bend_filter_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x25, part_bend_amplitude_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x26, part_bend_lfo_pmod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x27, part_bend_lfo_fmod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x28, part_bend_lfo_amod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x1d, part_mw_pitch_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x1e, part_mw_filter_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x1f, part_mw_amplitude_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x20, part_mw_lfo_pmod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x21, part_mw_lfo_fmod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x22, part_mw_lfo_amod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x4d, part_at_pitch_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x53, part_at_pitch_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x4e, part_at_filter_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x54, part_at_filter_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x4f, part_at_amplitude_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x55, part_at_amplitude_control[idx], 1);
    sysex_add_queue_multipart(idx, 0x50, part_at_lfo_pmod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x56, part_at_lfo_pmod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x51, part_at_lfo_fmod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x57, part_at_lfo_fmod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x52, part_at_lfo_amod_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x58, part_at_lfo_amod_depth[idx], 1);

    // restore keyboard parameters
    sysex_add_queue_multipart(idx, 0x0f, part_note_limit_low[idx], 1);
    sysex_add_queue_multipart(idx, 0x10, part_note_limit_high[idx], 1);
    sysex_add_queue_multipart(idx, 0x6d, part_velocity_limit_low[idx], 1);
    sysex_add_queue_multipart(idx, 0x6e, part_velocity_limit_high[idx], 1);
    sysex_add_queue_multipart(idx, 0x0c, part_velocity_sense_depth[idx], 1);
    sysex_add_queue_multipart(idx, 0x0d, part_velocity_sense_offset[idx], 1);
    sysex_add_queue_multipart(idx, 0x06, part_same_note_assign[idx], 1);
    sysex_add_queue_multipart(idx, 0x00, part_element_reserve[idx], 1);

    // restore tuning parameters
    sysex_add_queue_multipart(idx, 0x41, part_scale_c[idx], 1);
    sysex_add_queue_multipart(idx, 0x42, part_scale_cs[idx], 1);
    sysex_add_queue_multipart(idx, 0x43, part_scale_d[idx], 1);
    sysex_add_queue_multipart(idx, 0x44, part_scale_ds[idx], 1);
    sysex_add_queue_multipart(idx, 0x45, part_scale_e[idx], 1);
    sysex_add_queue_multipart(idx, 0x46, part_scale_f[idx], 1);
    sysex_add_queue_multipart(idx, 0x47, part_scale_fs[idx], 1);
    sysex_add_queue_multipart(idx, 0x48, part_scale_g[idx], 1);
    sysex_add_queue_multipart(idx, 0x49, part_scale_gs[idx], 1);
    sysex_add_queue_multipart(idx, 0x4a, part_scale_a[idx], 1);
    sysex_add_queue_multipart(idx, 0x4b, part_scale_as[idx], 1);
    sysex_add_queue_multipart(idx, 0x4c, part_scale_b[idx], 1);

    // restore MIDI filter parameters
    sysex_add_queue_multipart(idx, 0x35, part_recv_note[idx], 1);
    sysex_add_queue_multipart(idx, 0x32, part_recv_pc[idx], 1);
    sysex_add_queue_multipart(idx, 0x40, part_recv_bs[idx], 1);
    sysex_add_queue_multipart(idx, 0x31, part_recv_cat[idx], 1);
    sysex_add_queue_multipart(idx, 0x34, part_recv_pat[idx], 1);
    sysex_add_queue_multipart(idx, 0x30, part_recv_pb[idx], 1);
    sysex_add_queue_multipart(idx, 0x33, part_recv_cc[idx], 1);
    sysex_add_queue_multipart(idx, 0x38, part_recv_mod[idx], 1);
    sysex_add_queue_multipart(idx, 0x39, part_recv_vol[idx], 1);
    sysex_add_queue_multipart(idx, 0x3a, part_recv_pan[idx], 1);
    sysex_add_queue_multipart(idx, 0x3b, part_recv_exp[idx], 1);
    sysex_add_queue_multipart(idx, 0x3c, part_recv_sus[idx], 1);
    sysex_add_queue_multipart(idx, 0x3e, part_recv_sost[idx], 1);
    sysex_add_queue_multipart(idx, 0x3f, part_recv_soft[idx], 1);
    sysex_add_queue_multipart(idx, 0x3d, part_recv_port[idx], 1);
    sysex_add_queue_multipart(idx, 0x36, part_recv_rpn[idx], 1);
    sysex_add_queue_multipart(idx, 0x37, part_recv_nrpn[idx], 1);

    idx += 1;
  );
  spinlock.unlock();
);

// send queued sysex messages
sysex_queue_ptr > 0 ? (
  spinlock.lock();
  sysex_queue_len = sysex_queue_ptr;
  sysex_queue_ptr = 0;

  while (sysex_queue_ptr < sysex_queue_len) (
    xgsend_sysex(sysex_queue[sysex_queue_ptr + 0], sysex_queue[sysex_queue_ptr + 1], sysex_queue[sysex_queue_ptr + 2]);
    sysex_queue_ptr += 3;
  );

  sysex_queue_ptr = 0;
  sysex_delay = 0;
  spinlock.unlock();
);


@gfx 750 750

// setup ----------------------------------------------------------------------

spinlock.lock();

gui_key = gfx_getchar();
gui_key_ctrl = mouse_cap & 0x04;
gui_mouse_left = mouse_cap & 0x01 ? gui_mouse_left + 1 : 0;
gui_mouse_right = mouse_cap & 0x02 ? gui_mouse_right + 1 : 0;

!gui_mouse_left ? (
  gui_focus_x = -1;
  gui_focus_y = -1;
);

gui_param_focused() ? (
  gui_key = 0;
  gui_key_ctrl = 0;
);

gfx_setfont(font_default);

// main menu ------------------------------------------------------------------

set_color(color_bg_darkest);
gfx_rect(0, 0, gfx_w, gui_menu_height - 10);

set_color(color_bg_dark);
gfx_rect(0, gui_menu_height - 10, gfx_w, 10);

gui_menu_item(020, 10, "Overview"   , gui_page == 0, 1) ? gui_page = 0;
gui_menu_item(116, 10, "Voice List" , gui_page == 1, 1) ? gui_page = 1;
gui_menu_item(212, 10, "Part Editor", gui_page == 2, 1) ? gui_page = 2;
gui_menu_item(314, 10, "Reverb"     , gui_page == 3, 1) ? gui_page = 3;
gui_menu_item(392, 10, "Chorus"     , gui_page == 4, 1) ? gui_page = 4;
gui_menu_item(472, 10, "Variation"  , gui_page == 5, 1) ? gui_page = 5;

gui_page == 1 || gui_page == 2 ? (
  sprintf(#part_menu, "Part: %i", gui_part + 1);
  gui_menu_item(gfx_w - 64, 10, #part_menu, 0, 1) & 1 ? gui_part += 1;
  gui_menu_item(gfx_w - 64, 10, #part_menu, 0, 1) & 2 ? gui_part -= 1;
  gui_menu_item(gfx_w - 64, 10, #part_menu, 0, 2) ? gui_part += sign(mouse_wheel);

  gui_part > 15 ? gui_part = 0;
  gui_part < 0 ? gui_part = 15;

  // change part number with number keys (1-10)
  gui_key == 49 ? gui_part = 0;
  gui_key == 50 ? gui_part = 1;
  gui_key == 51 ? gui_part = 2;
  gui_key == 52 ? gui_part = 3;
  gui_key == 53 ? gui_part = 4;
  gui_key == 54 ? gui_part = 5;
  gui_key == 55 ? gui_part = 6;
  gui_key == 56 ? gui_part = 7;
  gui_key == 57 ? gui_part = 8;
  gui_key == 48 ? gui_part = 9;

  // change part number with qwerty keys (11-16)
  gui_key == 81 || gui_key == 113 ? gui_part = 10;
  gui_key == 87 || gui_key == 119 ? gui_part = 11;
  gui_key == 69 || gui_key == 101 ? gui_part = 12;
  gui_key == 82 || gui_key == 114 ? gui_part = 13;
  gui_key == 84 || gui_key == 116 ? gui_part = 14;
  gui_key == 89 || gui_key == 121 ? gui_part = 15;
) : (
  #part_menu = gui_page == 0 ? "Multi" : "System";
  gui_menu_item(gfx_w - 64, 10, #part_menu, 0, -1);
);

gui_page != gui_page_prev || gui_part != gui_part_prev ? (
  gui_categories_voice_cursor = voice_category[gui_part];
);

// current page ---------------------------------------------------------------

gui_page == 0 ? (
  set_color(color_bg_dark);
  gfx_rect(0, gui_menu_height, gfx_w, gui_overview_header_height);

  row = 0;

  loop (16,
    row % 2 == 0 ? set_color(color_bg_dark) : set_color(color_bg_col_alt);
    gfx_rect(0, gui_menu_height + gui_overview_header_height + (gui_overview_cell_height * row), gui_overview_cell_width, gui_overview_cell_height);

    row % 2 == 0 ? set_color(color_bg_light) : set_color(color_bg_row_alt);
    gfx_rect(gui_overview_cell_width, gui_menu_height + gui_overview_header_height + (gui_overview_cell_height * row), gfx_w - gui_overview_cell_width, gui_overview_cell_height);

    row += 1;
  );
) : (
  set_color(color_bg_dark);
  gfx_rect(0, gui_menu_height, gui_categories_width, gfx_h - gui_menu_height);

  set_color(color_bg_light);
  gfx_rect(gui_categories_width, gui_menu_height, gfx_w - gui_categories_width, gfx_h - gui_menu_height);
);

gui_categories_visible = floor((gfx_h - gui_menu_height - 20) / gui_list_item_height) - 1;
gui_categories_visible = max(gui_categories_visible, 1);

gui_menu_item(gfx_w - 107, 10, "XG", 0, 1) ? (
  gui_restore();
) : (
  gui_pages();
);

// cleanup --------------------------------------------------------------------

gui_key = 0;
gui_key_ctrl = 0;
mouse_wheel = 0;
gui_page_prev = gui_page;
gui_part_prev = gui_part;

spinlock.unlock();
